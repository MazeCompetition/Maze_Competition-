
Maze_Competition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000095c  000009f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800064  00800064  000009f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002875  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e28  00000000  00000000  000034cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000156e  00000000  00000000  000042f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000710  00000000  00000000  00005864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9e  00000000  00000000  00005f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a9d  00000000  00000000  00006a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000084af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_4>
  14:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_5>
  18:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_6>
  1c:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_7>
  20:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_8>
  24:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_9>
  28:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_10>
  2c:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8c 01 	call	0x318	; 0x318 <main>
  8a:	0c 94 ac 04 	jmp	0x958	; 0x958 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
  92:	fc 01       	movw	r30, r24
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <__system_time>
  9c:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <__system_time+0x1>
  a0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__system_time+0x2>
  a4:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__system_time+0x3>
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	30 97       	sbiw	r30, 0x00	; 0
  ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
  ae:	60 83       	st	Z, r22
  b0:	71 83       	std	Z+1, r23	; 0x01
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	93 83       	std	Z+3, r25	; 0x03
  b6:	08 95       	ret

000000b8 <DC_Motor_Init>:
//		|------------------------------------------------------------------|



void DC_Motor_Init(struct GPIO_t * GPIOx , uint8_t PinForward , uint8_t PinBackward )
{
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	2e 97       	sbiw	r28, 0x0e	; 14
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	8c 01       	movw	r16, r24
  d8:	d6 2e       	mov	r13, r22
  da:	e4 2e       	mov	r14, r20
	TIMER0_CFG_t DC_Motor_cfg;
	DC_Motor_cfg.COM0 = COM0_Clear;
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	8c 83       	std	Y+4, r24	; 0x04
	DC_Motor_cfg.CS0 = CS0_256;
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	8d 83       	std	Y+5, r24	; 0x05
	DC_Motor_cfg.INT0_EN = INT0_EN_Disable;
  e4:	18 86       	std	Y+8, r1	; 0x08
	DC_Motor_cfg.OutCR0 = 0;
  e6:	1f 82       	std	Y+7, r1	; 0x07
	DC_Motor_cfg.P_OCIE0 = NULL;
  e8:	1c 86       	std	Y+12, r1	; 0x0c
  ea:	1b 86       	std	Y+11, r1	; 0x0b
	DC_Motor_cfg.P_TOIE0 = NULL;
  ec:	1a 86       	std	Y+10, r1	; 0x0a
  ee:	19 86       	std	Y+9, r1	; 0x09
	DC_Motor_cfg.TCNT0 = 0x00;
  f0:	1e 82       	std	Y+6, r1	; 0x06
	DC_Motor_cfg.TIMNUM = TIMNUM_0;
  f2:	19 82       	std	Y+1, r1	; 0x01
	DC_Motor_cfg.WGM0 = WGM0_PhaseCorrect;
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	8a 83       	std	Y+2, r24	; 0x02
	
	MCAL_TIMER0_INIT(&DC_Motor_cfg);
  f8:	ce 01       	movw	r24, r28
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	0e 94 09 02 	call	0x412	; 0x412 <MCAL_TIMER0_INIT>
	
	struct GPIO_CFG_t gpio_cfg;
	gpio_cfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 100:	ff 24       	eor	r15, r15
 102:	f3 94       	inc	r15
 104:	fe 86       	std	Y+14, r15	; 0x0e
	gpio_cfg.GPIO_PinNumber = PinForward;
 106:	dd 86       	std	Y+13, r13	; 0x0d
	MCAL_GPIO_INIT_PIN(GPIOx , &gpio_cfg);
 108:	be 01       	movw	r22, r28
 10a:	63 5f       	subi	r22, 0xF3	; 243
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>

	gpio_cfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 114:	fe 86       	std	Y+14, r15	; 0x0e
	gpio_cfg.GPIO_PinNumber = PinBackward;
 116:	ed 86       	std	Y+13, r14	; 0x0d
	MCAL_GPIO_INIT_PIN(GPIOx , &gpio_cfg);
 118:	be 01       	movw	r22, r28
 11a:	63 5f       	subi	r22, 0xF3	; 243
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
 11e:	c8 01       	movw	r24, r16
 120:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>

	
}
 124:	2e 96       	adiw	r28, 0x0e	; 14
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	ef 90       	pop	r14
 13c:	df 90       	pop	r13
 13e:	08 95       	ret

00000140 <LCD_WRITE_COMMAND>:



void LCD_WRITE_COMMAND(unsigned char command){
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_CTRL = (LCD_CTRL & LCD_WRITE_INSTRUCTION);
 140:	4b b3       	in	r20, 0x1b	; 27
	LCD_DATA = ((LCD_DATA & LCD_INPUT_PINS) | ((command & 0xF0) >> MOST_BIT_PIN));
 142:	98 2f       	mov	r25, r24
 144:	90 7f       	andi	r25, 0xF0	; 240
 146:	29 2f       	mov	r18, r25
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	35 95       	asr	r19
 14c:	27 95       	ror	r18
 14e:	94 2f       	mov	r25, r20
 150:	95 78       	andi	r25, 0x85	; 133
 152:	29 2b       	or	r18, r25
	LCD_ENABLE;
 154:	24 60       	ori	r18, 0x04	; 4
 156:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	e3 ed       	ldi	r30, 0xD3	; 211
 15a:	f0 e3       	ldi	r31, 0x30	; 48
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_WRITE_COMMAND+0x1c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_WRITE_COMMAND+0x22>
 162:	00 00       	nop
 164:	9b b3       	in	r25, 0x1b	; 27
 166:	9b 7f       	andi	r25, 0xFB	; 251
 168:	9b bb       	out	0x1b, r25	; 27
 16a:	ef e4       	ldi	r30, 0x4F	; 79
 16c:	f3 ec       	ldi	r31, 0xC3	; 195
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_WRITE_COMMAND+0x2e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_WRITE_COMMAND+0x34>
 174:	00 00       	nop
	LCD_CTRL = (LCD_CTRL & LCD_WRITE_INSTRUCTION);
 176:	2b b3       	in	r18, 0x1b	; 27
	LCD_DATA = ((LCD_DATA & LCD_INPUT_PINS) | ((command & 0x0F) << LEAST_BIT_PIN));
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	92 2f       	mov	r25, r18
 18a:	95 78       	andi	r25, 0x85	; 133
 18c:	89 2b       	or	r24, r25
	LCD_ENABLE;
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	8b bb       	out	0x1b, r24	; 27
 192:	83 ed       	ldi	r24, 0xD3	; 211
 194:	90 e3       	ldi	r25, 0x30	; 48
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_WRITE_COMMAND+0x56>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_WRITE_COMMAND+0x5c>
 19c:	00 00       	nop
 19e:	8b b3       	in	r24, 0x1b	; 27
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	8b bb       	out	0x1b, r24	; 27
 1a4:	ef e4       	ldi	r30, 0x4F	; 79
 1a6:	f3 ec       	ldi	r31, 0xC3	; 195
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_WRITE_COMMAND+0x68>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_WRITE_COMMAND+0x6e>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <LCD_INIT>:
 1b2:	87 e8       	ldi	r24, 0x87	; 135
 1b4:	93 e1       	ldi	r25, 0x13	; 19
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_INIT+0x4>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_INIT+0xa>
 1bc:	00 00       	nop
#ifdef FOUR_BIT_MODE

void LCD_INIT(){
	_delay_ms(20);
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_CTRL &= ~(1 << EN);
 1be:	8b b3       	in	r24, 0x1b	; 27
 1c0:	8b 7f       	andi	r24, 0xFB	; 251
 1c2:	8b bb       	out	0x1b, r24	; 27
	LCD_WRITE_COMMAND(LCD_Return_Home);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON);
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_Clear_Display);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_4BITS_2LINES_5X8);
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 1dc:	8f e0       	ldi	r24, 0x0F	; 15
 1de:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
 1e2:	08 95       	ret

000001e4 <Ultrasonic_Init>:
//		|=============APIs Supported by "MCAL GPIO DRIVER"=================|
//		|------------------------------------------------------------------|


void Ultrasonic_Init()
{
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	6c 97       	sbiw	r28, 0x1c	; 28
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
	TIMER1_CFG_t ultrasonic;
	ultrasonic.TIMNUM = TIMNUM_1;	
 1fa:	11 e0       	ldi	r17, 0x01	; 1
 1fc:	19 83       	std	Y+1, r17	; 0x01
	ultrasonic.ICNC1 = ICNC1_Disable;		
 1fe:	1c 82       	std	Y+4, r1	; 0x04
	ultrasonic.ICES1 = ICES1_RisingEdge;	
 200:	80 e4       	ldi	r24, 0x40	; 64
 202:	8d 83       	std	Y+5, r24	; 0x05
	ultrasonic.WGM1 = WGM1_Normal;
 204:	18 86       	std	Y+8, r1	; 0x08
	ultrasonic.COM1A = 0;
 206:	19 86       	std	Y+9, r1	; 0x09
	ultrasonic.COM1B = 0;
 208:	1a 86       	std	Y+10, r1	; 0x0a
	ultrasonic.CS1 = CS1_1024;
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	8b 87       	std	Y+11, r24	; 0x0b
	ultrasonic.TCNT1L = 0;
 20e:	1c 86       	std	Y+12, r1	; 0x0c
	ultrasonic.TCNT1H = 0;
 210:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic.OCR1AL = 0;
 212:	1e 86       	std	Y+14, r1	; 0x0e
	ultrasonic.OCR1AH = 0;
 214:	1f 86       	std	Y+15, r1	; 0x0f
	ultrasonic.OCR1BL = 0;
 216:	18 8a       	std	Y+16, r1	; 0x10
	ultrasonic.OCR1BH = 0;		
 218:	19 8a       	std	Y+17, r1	; 0x11
	ultrasonic.INT1_EN = INT1_EN_Disable;
 21a:	1a 8a       	std	Y+18, r1	; 0x12
	
	struct GPIO_CFG_t gpiocfg;
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 21c:	1c 8f       	std	Y+28, r17	; 0x1c
	gpiocfg.GPIO_PinNumber = Trig1;
 21e:	1b 8e       	std	Y+27, r1	; 0x1b
	MCAL_GPIO_INIT_PIN(US_PORTx ,&gpiocfg );
 220:	be 01       	movw	r22, r28
 222:	65 5e       	subi	r22, 0xE5	; 229
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
	
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 22e:	1c 8f       	std	Y+28, r17	; 0x1c
	gpiocfg.GPIO_PinNumber = Trig2;
 230:	1b 8f       	std	Y+27, r17	; 0x1b
	MCAL_GPIO_INIT_PIN(US_PORTx ,&gpiocfg );
 232:	be 01       	movw	r22, r28
 234:	65 5e       	subi	r22, 0xE5	; 229
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	80 e3       	ldi	r24, 0x30	; 48
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
			
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 240:	1c 8f       	std	Y+28, r17	; 0x1c
	gpiocfg.GPIO_PinNumber = Trig3;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	8b 8f       	std	Y+27, r24	; 0x1b
	MCAL_GPIO_INIT_PIN(US_PORTx ,&gpiocfg );
 246:	be 01       	movw	r22, r28
 248:	65 5e       	subi	r22, 0xE5	; 229
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	80 e3       	ldi	r24, 0x30	; 48
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
				
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 254:	1c 8f       	std	Y+28, r17	; 0x1c
	gpiocfg.GPIO_PinNumber = Trig4;
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	8b 8f       	std	Y+27, r24	; 0x1b
	MCAL_GPIO_INIT_PIN(US_PORTx ,&gpiocfg );
 25a:	be 01       	movw	r22, r28
 25c:	65 5e       	subi	r22, 0xE5	; 229
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	80 e3       	ldi	r24, 0x30	; 48
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
		
	MCAL_TIMER1_INIT(&ultrasonic);
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <MCAL_TIMER1_INIT>
}
 270:	6c 96       	adiw	r28, 0x1c	; 28
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	f8 94       	cli
 276:	de bf       	out	0x3e, r29	; 62
 278:	0f be       	out	0x3f, r0	; 63
 27a:	cd bf       	out	0x3d, r28	; 61
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	08 95       	ret

00000284 <LCDInit>:
	 
	  
	 
}
void LCDInit()
{
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <LCDInit+0x8>
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
	struct GPIO_CFG_t gpiocfg;
	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_1;
 290:	11 e0       	ldi	r17, 0x01	; 1
 292:	19 83       	std	Y+1, r17	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 294:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	89 e3       	ldi	r24, 0x39	; 57
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>

	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_2;
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 2a8:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	89 e3       	ldi	r24, 0x39	; 57
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>

	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_3;
 2b8:	83 e0       	ldi	r24, 0x03	; 3
 2ba:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 2bc:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
 2be:	be 01       	movw	r22, r28
 2c0:	6f 5f       	subi	r22, 0xFF	; 255
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	89 e3       	ldi	r24, 0x39	; 57
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
	
	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_4;
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 2d0:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
 2d2:	be 01       	movw	r22, r28
 2d4:	6f 5f       	subi	r22, 0xFF	; 255
 2d6:	7f 4f       	sbci	r23, 0xFF	; 255
 2d8:	89 e3       	ldi	r24, 0x39	; 57
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>

	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_5;
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 2e4:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
 2e6:	be 01       	movw	r22, r28
 2e8:	6f 5f       	subi	r22, 0xFF	; 255
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255
 2ec:	89 e3       	ldi	r24, 0x39	; 57
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>

	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_6;
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
 2f8:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	89 e3       	ldi	r24, 0x39	; 57
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
	
	LCD_INIT();
 308:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_INIT>
}
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	08 95       	ret

00000318 <main>:
void take_action (void);
uint8_t get_index(int8_t in);

int main(void)
{
	srand(time(NULL));
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 49 00 	call	0x92	; 0x92 <time>
 320:	cb 01       	movw	r24, r22
 322:	0e 94 3e 04 	call	0x87c	; 0x87c <srand>
	LCDInit();
 326:	0e 94 42 01 	call	0x284	; 0x284 <LCDInit>
	DC_Motor_Init(PORTB , GPIO_PinNumber_4 , GPIO_PinNumber_5 );
 32a:	45 e0       	ldi	r20, 0x05	; 5
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	86 e3       	ldi	r24, 0x36	; 54
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 5c 00 	call	0xb8	; 0xb8 <DC_Motor_Init>
    Ultrasonic_Init();
 336:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Ultrasonic_Init>
 33a:	ff cf       	rjmp	.-2      	; 0x33a <main+0x22>

0000033c <MCAL_GPIO_INIT_PIN>:

//		|------------------------------------------------------------------|
//		|=============APIs Supported by "MCAL GPIO DRIVER"=================|
//		|------------------------------------------------------------------|

void MCAL_GPIO_INIT_PIN(struct GPIO_t * PORTx , struct GPIO_CFG_t * PIN){
 33c:	fc 01       	movw	r30, r24
 33e:	db 01       	movw	r26, r22
	
	if(PIN->GPIO_Mode == GPIO_Mode_INPUT){
 340:	11 96       	adiw	r26, 0x01	; 1
 342:	2c 91       	ld	r18, X
 344:	11 97       	sbiw	r26, 0x01	; 1
 346:	21 11       	cpse	r18, r1
 348:	20 c0       	rjmp	.+64     	; 0x38a <MCAL_GPIO_INIT_PIN+0x4e>
		PORTx->DDR = (PORTx->DDR & ~(1 << PIN->GPIO_PinNumber)) | (PIN->GPIO_Mode << PIN->GPIO_PinNumber);
 34a:	41 81       	ldd	r20, Z+1	; 0x01
 34c:	5c 91       	ld	r21, X
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	bc 01       	movw	r22, r24
 354:	05 2e       	mov	r0, r21
 356:	02 c0       	rjmp	.+4      	; 0x35c <MCAL_GPIO_INIT_PIN+0x20>
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <MCAL_GPIO_INIT_PIN+0x1c>
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <MCAL_GPIO_INIT_PIN+0x2c>
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	5a 95       	dec	r21
 36a:	e2 f7       	brpl	.-8      	; 0x364 <MCAL_GPIO_INIT_PIN+0x28>
 36c:	36 2f       	mov	r19, r22
 36e:	30 95       	com	r19
 370:	34 23       	and	r19, r20
 372:	23 2b       	or	r18, r19
 374:	21 83       	std	Z+1, r18	; 0x01
		PORTx->PORT &= 1 << PIN->GPIO_PinNumber;
 376:	0c 90       	ld	r0, X
 378:	02 c0       	rjmp	.+4      	; 0x37e <MCAL_GPIO_INIT_PIN+0x42>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <MCAL_GPIO_INIT_PIN+0x3e>
 382:	92 81       	ldd	r25, Z+2	; 0x02
 384:	89 23       	and	r24, r25
 386:	82 83       	std	Z+2, r24	; 0x02
 388:	08 95       	ret
	}
	else if(PIN->GPIO_Mode == GPIO_Mode_INPUT_FLO){
 38a:	22 30       	cpi	r18, 0x02	; 2
 38c:	c1 f4       	brne	.+48     	; 0x3be <MCAL_GPIO_INIT_PIN+0x82>
		PORTx->DDR &= ~(1 << PIN->GPIO_PinNumber);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	9c 01       	movw	r18, r24
 394:	0c 90       	ld	r0, X
 396:	02 c0       	rjmp	.+4      	; 0x39c <MCAL_GPIO_INIT_PIN+0x60>
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <MCAL_GPIO_INIT_PIN+0x5c>
 3a0:	20 95       	com	r18
 3a2:	31 81       	ldd	r19, Z+1	; 0x01
 3a4:	23 23       	and	r18, r19
 3a6:	21 83       	std	Z+1, r18	; 0x01
		PORTx->PORT &= ~(1 << PIN->GPIO_PinNumber);
 3a8:	0c 90       	ld	r0, X
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <MCAL_GPIO_INIT_PIN+0x74>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <MCAL_GPIO_INIT_PIN+0x70>
 3b4:	80 95       	com	r24
 3b6:	92 81       	ldd	r25, Z+2	; 0x02
 3b8:	89 23       	and	r24, r25
 3ba:	82 83       	std	Z+2, r24	; 0x02
 3bc:	08 95       	ret
	}
	else{
		PORTx->DDR = (PORTx->DDR & ~(1 << PIN->GPIO_PinNumber)) | (PIN->GPIO_Mode << PIN->GPIO_PinNumber);
 3be:	41 81       	ldd	r20, Z+1	; 0x01
 3c0:	5c 91       	ld	r21, X
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	05 2e       	mov	r0, r21
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <MCAL_GPIO_INIT_PIN+0x92>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	0a 94       	dec	r0
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <MCAL_GPIO_INIT_PIN+0x8e>
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <MCAL_GPIO_INIT_PIN+0x9e>
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	5a 95       	dec	r21
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <MCAL_GPIO_INIT_PIN+0x9a>
 3de:	80 95       	com	r24
 3e0:	84 23       	and	r24, r20
 3e2:	28 2b       	or	r18, r24
 3e4:	21 83       	std	Z+1, r18	; 0x01
 3e6:	08 95       	ret

000003e8 <MCAL_TIMER0_GPIO_SetPINS>:
	
	Timer2->OCR2 = timcfg->OCR2;
	
	Timer2->ASSR = (Timer2->ASSR & ~(1 << 3)) | timcfg->AS2;
	
	MCAL_TIMER2_GPIO_SetPINS();
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	00 d0       	rcall	.+0      	; 0x3ee <MCAL_TIMER0_GPIO_SetPINS+0x6>
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	8a 83       	std	Y+2, r24	; 0x02
 3f6:	83 e0       	ldi	r24, 0x03	; 3
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	be 01       	movw	r22, r28
 3fc:	6f 5f       	subi	r22, 0xFF	; 255
 3fe:	7f 4f       	sbci	r23, 0xFF	; 255
 400:	86 e3       	ldi	r24, 0x36	; 54
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <MCAL_TIMER0_INIT>:
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	ec 01       	movw	r28, r24
 418:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <MCAL_TIMER0_GPIO_SetPINS>
 41c:	8f 81       	ldd	r24, Y+7	; 0x07
 41e:	88 23       	and	r24, r24
 420:	91 f0       	breq	.+36     	; 0x446 <MCAL_TIMER0_INIT+0x34>
 422:	8f b7       	in	r24, 0x3f	; 63
 424:	80 68       	ori	r24, 0x80	; 128
 426:	8f bf       	out	0x3f, r24	; 63
 428:	8a 85       	ldd	r24, Y+10	; 0x0a
 42a:	9b 85       	ldd	r25, Y+11	; 0x0b
 42c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <GP_TIMER0_Compare_Match+0x1>
 430:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <GP_TIMER0_Compare_Match>
 434:	88 85       	ldd	r24, Y+8	; 0x08
 436:	99 85       	ldd	r25, Y+9	; 0x09
 438:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <GP_TIMER0_OverFlow+0x1>
 43c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <GP_TIMER0_OverFlow>
 440:	89 b7       	in	r24, 0x39	; 57
 442:	81 60       	ori	r24, 0x01	; 1
 444:	89 bf       	out	0x39, r24	; 57
 446:	8e 81       	ldd	r24, Y+6	; 0x06
 448:	8c bf       	out	0x3c, r24	; 60
 44a:	83 b7       	in	r24, 0x33	; 51
 44c:	84 66       	ori	r24, 0x64	; 100
 44e:	83 bf       	out	0x33, r24	; 51
 450:	8d 81       	ldd	r24, Y+5	; 0x05
 452:	92 b7       	in	r25, 0x32	; 50
 454:	89 2b       	or	r24, r25
 456:	82 bf       	out	0x32, r24	; 50
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <MCAL_TIMER1_GPIO_SetPINS>:
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	00 d0       	rcall	.+0      	; 0x466 <MCAL_TIMER1_GPIO_SetPINS+0x8>
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	11 e0       	ldi	r17, 0x01	; 1
 46c:	1a 83       	std	Y+2, r17	; 0x02
 46e:	85 e0       	ldi	r24, 0x05	; 5
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	be 01       	movw	r22, r28
 474:	6f 5f       	subi	r22, 0xFF	; 255
 476:	7f 4f       	sbci	r23, 0xFF	; 255
 478:	80 e3       	ldi	r24, 0x30	; 48
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
 480:	1a 83       	std	Y+2, r17	; 0x02
 482:	84 e0       	ldi	r24, 0x04	; 4
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	be 01       	movw	r22, r28
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	80 e3       	ldi	r24, 0x30	; 48
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
 494:	1a 82       	std	Y+2, r1	; 0x02
 496:	86 e0       	ldi	r24, 0x06	; 6
 498:	89 83       	std	Y+1, r24	; 0x01
 49a:	be 01       	movw	r22, r28
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	80 e3       	ldi	r24, 0x30	; 48
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 9e 01 	call	0x33c	; 0x33c <MCAL_GPIO_INIT_PIN>
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	08 95       	ret

000004b4 <MCAL_TIMER1_INIT>:
 4b4:	fc 01       	movw	r30, r24
 4b6:	81 89       	ldd	r24, Z+17	; 0x11
 4b8:	88 23       	and	r24, r24
 4ba:	f1 f0       	breq	.+60     	; 0x4f8 <MCAL_TIMER1_INIT+0x44>
 4bc:	8f b7       	in	r24, 0x3f	; 63
 4be:	80 68       	ori	r24, 0x80	; 128
 4c0:	8f bf       	out	0x3f, r24	; 63
 4c2:	82 89       	ldd	r24, Z+18	; 0x12
 4c4:	93 89       	ldd	r25, Z+19	; 0x13
 4c6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <GP_TICIE1_InputCapture+0x1>
 4ca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <GP_TICIE1_InputCapture>
 4ce:	24 89       	ldd	r18, Z+20	; 0x14
 4d0:	35 89       	ldd	r19, Z+21	; 0x15
 4d2:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <GP_OCIE1A_Compare_MatchA+0x1>
 4d6:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <GP_OCIE1A_Compare_MatchA>
 4da:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <GP_TOIE1_OverFlow+0x1>
 4de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <GP_TOIE1_OverFlow>
 4e2:	86 89       	ldd	r24, Z+22	; 0x16
 4e4:	97 89       	ldd	r25, Z+23	; 0x17
 4e6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <GP_OCIE1B_Compare_MatchB+0x1>
 4ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <GP_OCIE1B_Compare_MatchB>
 4ee:	89 b7       	in	r24, 0x39	; 57
 4f0:	91 89       	ldd	r25, Z+17	; 0x11
 4f2:	83 7c       	andi	r24, 0xC3	; 195
 4f4:	89 2b       	or	r24, r25
 4f6:	89 bf       	out	0x39, r24	; 57
 4f8:	3f b5       	in	r19, 0x2f	; 47
 4fa:	80 85       	ldd	r24, Z+8	; 0x08
 4fc:	3f 73       	andi	r19, 0x3F	; 63
 4fe:	38 2b       	or	r19, r24
 500:	3f bd       	out	0x2f, r19	; 47
 502:	81 85       	ldd	r24, Z+9	; 0x09
 504:	3f 7c       	andi	r19, 0xCF	; 207
 506:	38 2b       	or	r19, r24
 508:	3f bd       	out	0x2f, r19	; 47
 50a:	2e b5       	in	r18, 0x2e	; 46
 50c:	83 81       	ldd	r24, Z+3	; 0x03
 50e:	2f 77       	andi	r18, 0x7F	; 127
 510:	28 2b       	or	r18, r24
 512:	2e bd       	out	0x2e, r18	; 46
 514:	94 81       	ldd	r25, Z+4	; 0x04
 516:	2f 7b       	andi	r18, 0xBF	; 191
 518:	29 2b       	or	r18, r25
 51a:	2e bd       	out	0x2e, r18	; 46
 51c:	92 85       	ldd	r25, Z+10	; 0x0a
 51e:	28 7f       	andi	r18, 0xF8	; 248
 520:	29 2b       	or	r18, r25
 522:	2e bd       	out	0x2e, r18	; 46
 524:	84 85       	ldd	r24, Z+12	; 0x0c
 526:	8d bd       	out	0x2d, r24	; 45
 528:	83 85       	ldd	r24, Z+11	; 0x0b
 52a:	8c bd       	out	0x2c, r24	; 44
 52c:	86 85       	ldd	r24, Z+14	; 0x0e
 52e:	8b bd       	out	0x2b, r24	; 43
 530:	85 85       	ldd	r24, Z+13	; 0x0d
 532:	8a bd       	out	0x2a, r24	; 42
 534:	80 89       	ldd	r24, Z+16	; 0x10
 536:	89 bd       	out	0x29, r24	; 41
 538:	87 85       	ldd	r24, Z+15	; 0x0f
 53a:	88 bd       	out	0x28, r24	; 40
 53c:	87 81       	ldd	r24, Z+7	; 0x07
 53e:	3c 7f       	andi	r19, 0xFC	; 252
 540:	83 70       	andi	r24, 0x03	; 3
 542:	38 2b       	or	r19, r24
 544:	3f bd       	out	0x2f, r19	; 47
 546:	97 81       	ldd	r25, Z+7	; 0x07
 548:	96 95       	lsr	r25
 54a:	96 95       	lsr	r25
 54c:	93 70       	andi	r25, 0x03	; 3
 54e:	89 2f       	mov	r24, r25
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	27 7e       	andi	r18, 0xE7	; 231
 560:	82 2b       	or	r24, r18
 562:	8e bd       	out	0x2e, r24	; 46
 564:	0e 94 2f 02 	call	0x45e	; 0x45e <MCAL_TIMER1_GPIO_SetPINS>
 568:	08 95       	ret

0000056a <__vector_11>:
//			 |\_______________________________________/|


void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
	GP_TIMER0_OverFlow();
 58c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <GP_TIMER0_OverFlow>
 590:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <GP_TIMER0_OverFlow+0x1>
 594:	09 95       	icall
}
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	bf 91       	pop	r27
 59c:	af 91       	pop	r26
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	7f 91       	pop	r23
 5a4:	6f 91       	pop	r22
 5a6:	5f 91       	pop	r21
 5a8:	4f 91       	pop	r20
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <__vector_10>:


void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	2f 93       	push	r18
 5c4:	3f 93       	push	r19
 5c6:	4f 93       	push	r20
 5c8:	5f 93       	push	r21
 5ca:	6f 93       	push	r22
 5cc:	7f 93       	push	r23
 5ce:	8f 93       	push	r24
 5d0:	9f 93       	push	r25
 5d2:	af 93       	push	r26
 5d4:	bf 93       	push	r27
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31
	GP_TIMER0_Compare_Match();
 5da:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <GP_TIMER0_Compare_Match>
 5de:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <GP_TIMER0_Compare_Match+0x1>
 5e2:	09 95       	icall
}
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	7f 91       	pop	r23
 5f2:	6f 91       	pop	r22
 5f4:	5f 91       	pop	r21
 5f6:	4f 91       	pop	r20
 5f8:	3f 91       	pop	r19
 5fa:	2f 91       	pop	r18
 5fc:	0f 90       	pop	r0
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	0f 90       	pop	r0
 602:	1f 90       	pop	r1
 604:	18 95       	reti

00000606 <__vector_5>:
//			 |\__________		Timer 2		__________/|
//			 |\_______________________________________/|

void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	11 24       	eor	r1, r1
 610:	2f 93       	push	r18
 612:	3f 93       	push	r19
 614:	4f 93       	push	r20
 616:	5f 93       	push	r21
 618:	6f 93       	push	r22
 61a:	7f 93       	push	r23
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	af 93       	push	r26
 622:	bf 93       	push	r27
 624:	ef 93       	push	r30
 626:	ff 93       	push	r31
	GP_TOIE2_OverFlow();
 628:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <GP_TOIE2_OverFlow>
 62c:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <GP_TOIE2_OverFlow+0x1>
 630:	09 95       	icall
}
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <__vector_4>:

void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	2f 93       	push	r18
 660:	3f 93       	push	r19
 662:	4f 93       	push	r20
 664:	5f 93       	push	r21
 666:	6f 93       	push	r22
 668:	7f 93       	push	r23
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	af 93       	push	r26
 670:	bf 93       	push	r27
 672:	ef 93       	push	r30
 674:	ff 93       	push	r31
	GP_OCIE2_Compare_Match();
 676:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 67a:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
 67e:	09 95       	icall
}
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	bf 91       	pop	r27
 686:	af 91       	pop	r26
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	7f 91       	pop	r23
 68e:	6f 91       	pop	r22
 690:	5f 91       	pop	r21
 692:	4f 91       	pop	r20
 694:	3f 91       	pop	r19
 696:	2f 91       	pop	r18
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <__vector_6>:
//			 |\__________		Timer 1		__________/|
//			 |\_______________________________________/|

void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
 6a2:	1f 92       	push	r1
 6a4:	0f 92       	push	r0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2f 93       	push	r18
 6ae:	3f 93       	push	r19
 6b0:	4f 93       	push	r20
 6b2:	5f 93       	push	r21
 6b4:	6f 93       	push	r22
 6b6:	7f 93       	push	r23
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
	GP_TICIE1_InputCapture();
 6c4:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <GP_TICIE1_InputCapture>
 6c8:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <GP_TICIE1_InputCapture+0x1>
 6cc:	09 95       	icall

}
 6ce:	ff 91       	pop	r31
 6d0:	ef 91       	pop	r30
 6d2:	bf 91       	pop	r27
 6d4:	af 91       	pop	r26
 6d6:	9f 91       	pop	r25
 6d8:	8f 91       	pop	r24
 6da:	7f 91       	pop	r23
 6dc:	6f 91       	pop	r22
 6de:	5f 91       	pop	r21
 6e0:	4f 91       	pop	r20
 6e2:	3f 91       	pop	r19
 6e4:	2f 91       	pop	r18
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <__vector_7>:


void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	2f 93       	push	r18
 6fc:	3f 93       	push	r19
 6fe:	4f 93       	push	r20
 700:	5f 93       	push	r21
 702:	6f 93       	push	r22
 704:	7f 93       	push	r23
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
	GP_OCIE1A_Compare_MatchA();
 712:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <GP_OCIE1A_Compare_MatchA>
 716:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <GP_OCIE1A_Compare_MatchA+0x1>
 71a:	09 95       	icall
}
 71c:	ff 91       	pop	r31
 71e:	ef 91       	pop	r30
 720:	bf 91       	pop	r27
 722:	af 91       	pop	r26
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	7f 91       	pop	r23
 72a:	6f 91       	pop	r22
 72c:	5f 91       	pop	r21
 72e:	4f 91       	pop	r20
 730:	3f 91       	pop	r19
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_8>:



void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
	GP_OCIE1B_Compare_MatchB();
 760:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GP_OCIE1B_Compare_MatchB>
 764:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <GP_OCIE1B_Compare_MatchB+0x1>
 768:	09 95       	icall

}
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <__vector_9>:


void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
 78c:	1f 92       	push	r1
 78e:	0f 92       	push	r0
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	0f 92       	push	r0
 794:	11 24       	eor	r1, r1
 796:	2f 93       	push	r18
 798:	3f 93       	push	r19
 79a:	4f 93       	push	r20
 79c:	5f 93       	push	r21
 79e:	6f 93       	push	r22
 7a0:	7f 93       	push	r23
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
 7a6:	af 93       	push	r26
 7a8:	bf 93       	push	r27
 7aa:	ef 93       	push	r30
 7ac:	ff 93       	push	r31
	GP_TOIE1_OverFlow();
 7ae:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <GP_TOIE1_OverFlow>
 7b2:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <GP_TOIE1_OverFlow+0x1>
 7b6:	09 95       	icall
}
 7b8:	ff 91       	pop	r31
 7ba:	ef 91       	pop	r30
 7bc:	bf 91       	pop	r27
 7be:	af 91       	pop	r26
 7c0:	9f 91       	pop	r25
 7c2:	8f 91       	pop	r24
 7c4:	7f 91       	pop	r23
 7c6:	6f 91       	pop	r22
 7c8:	5f 91       	pop	r21
 7ca:	4f 91       	pop	r20
 7cc:	3f 91       	pop	r19
 7ce:	2f 91       	pop	r18
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <do_rand>:
 7da:	8f 92       	push	r8
 7dc:	9f 92       	push	r9
 7de:	af 92       	push	r10
 7e0:	bf 92       	push	r11
 7e2:	cf 92       	push	r12
 7e4:	df 92       	push	r13
 7e6:	ef 92       	push	r14
 7e8:	ff 92       	push	r15
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	ec 01       	movw	r28, r24
 7f0:	68 81       	ld	r22, Y
 7f2:	79 81       	ldd	r23, Y+1	; 0x01
 7f4:	8a 81       	ldd	r24, Y+2	; 0x02
 7f6:	9b 81       	ldd	r25, Y+3	; 0x03
 7f8:	61 15       	cp	r22, r1
 7fa:	71 05       	cpc	r23, r1
 7fc:	81 05       	cpc	r24, r1
 7fe:	91 05       	cpc	r25, r1
 800:	21 f4       	brne	.+8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 802:	64 e2       	ldi	r22, 0x24	; 36
 804:	79 ed       	ldi	r23, 0xD9	; 217
 806:	8b e5       	ldi	r24, 0x5B	; 91
 808:	97 e0       	ldi	r25, 0x07	; 7
 80a:	2d e1       	ldi	r18, 0x1D	; 29
 80c:	33 ef       	ldi	r19, 0xF3	; 243
 80e:	41 e0       	ldi	r20, 0x01	; 1
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	0e 94 49 04 	call	0x892	; 0x892 <__divmodsi4>
 816:	49 01       	movw	r8, r18
 818:	5a 01       	movw	r10, r20
 81a:	9b 01       	movw	r18, r22
 81c:	ac 01       	movw	r20, r24
 81e:	a7 ea       	ldi	r26, 0xA7	; 167
 820:	b1 e4       	ldi	r27, 0x41	; 65
 822:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__muluhisi3>
 826:	6b 01       	movw	r12, r22
 828:	7c 01       	movw	r14, r24
 82a:	ac ee       	ldi	r26, 0xEC	; 236
 82c:	b4 ef       	ldi	r27, 0xF4	; 244
 82e:	a5 01       	movw	r20, r10
 830:	94 01       	movw	r18, r8
 832:	0e 94 76 04 	call	0x8ec	; 0x8ec <__mulohisi3>
 836:	dc 01       	movw	r26, r24
 838:	cb 01       	movw	r24, r22
 83a:	8c 0d       	add	r24, r12
 83c:	9d 1d       	adc	r25, r13
 83e:	ae 1d       	adc	r26, r14
 840:	bf 1d       	adc	r27, r15
 842:	b7 ff       	sbrs	r27, 7
 844:	03 c0       	rjmp	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 846:	01 97       	sbiw	r24, 0x01	; 1
 848:	a1 09       	sbc	r26, r1
 84a:	b0 48       	sbci	r27, 0x80	; 128
 84c:	88 83       	st	Y, r24
 84e:	99 83       	std	Y+1, r25	; 0x01
 850:	aa 83       	std	Y+2, r26	; 0x02
 852:	bb 83       	std	Y+3, r27	; 0x03
 854:	9f 77       	andi	r25, 0x7F	; 127
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	ff 90       	pop	r15
 85c:	ef 90       	pop	r14
 85e:	df 90       	pop	r13
 860:	cf 90       	pop	r12
 862:	bf 90       	pop	r11
 864:	af 90       	pop	r10
 866:	9f 90       	pop	r9
 868:	8f 90       	pop	r8
 86a:	08 95       	ret

0000086c <rand_r>:
 86c:	0e 94 ed 03 	call	0x7da	; 0x7da <do_rand>
 870:	08 95       	ret

00000872 <rand>:
 872:	80 e6       	ldi	r24, 0x60	; 96
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 ed 03 	call	0x7da	; 0x7da <do_rand>
 87a:	08 95       	ret

0000087c <srand>:
 87c:	a0 e0       	ldi	r26, 0x00	; 0
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 884:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 888:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 88c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 890:	08 95       	ret

00000892 <__divmodsi4>:
 892:	05 2e       	mov	r0, r21
 894:	97 fb       	bst	r25, 7
 896:	1e f4       	brtc	.+6      	; 0x89e <__divmodsi4+0xc>
 898:	00 94       	com	r0
 89a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__negsi2>
 89e:	57 fd       	sbrc	r21, 7
 8a0:	07 d0       	rcall	.+14     	; 0x8b0 <__divmodsi4_neg2>
 8a2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__udivmodsi4>
 8a6:	07 fc       	sbrc	r0, 7
 8a8:	03 d0       	rcall	.+6      	; 0x8b0 <__divmodsi4_neg2>
 8aa:	4e f4       	brtc	.+18     	; 0x8be <__divmodsi4_exit>
 8ac:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__negsi2>

000008b0 <__divmodsi4_neg2>:
 8b0:	50 95       	com	r21
 8b2:	40 95       	com	r20
 8b4:	30 95       	com	r19
 8b6:	21 95       	neg	r18
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ba:	4f 4f       	sbci	r20, 0xFF	; 255
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255

000008be <__divmodsi4_exit>:
 8be:	08 95       	ret

000008c0 <__negsi2>:
 8c0:	90 95       	com	r25
 8c2:	80 95       	com	r24
 8c4:	70 95       	com	r23
 8c6:	61 95       	neg	r22
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <__muluhisi3>:
 8d0:	0e 94 9d 04 	call	0x93a	; 0x93a <__umulhisi3>
 8d4:	a5 9f       	mul	r26, r21
 8d6:	90 0d       	add	r25, r0
 8d8:	b4 9f       	mul	r27, r20
 8da:	90 0d       	add	r25, r0
 8dc:	a4 9f       	mul	r26, r20
 8de:	80 0d       	add	r24, r0
 8e0:	91 1d       	adc	r25, r1
 8e2:	11 24       	eor	r1, r1
 8e4:	08 95       	ret

000008e6 <__mulshisi3>:
 8e6:	b7 ff       	sbrs	r27, 7
 8e8:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__muluhisi3>

000008ec <__mulohisi3>:
 8ec:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__muluhisi3>
 8f0:	82 1b       	sub	r24, r18
 8f2:	93 0b       	sbc	r25, r19
 8f4:	08 95       	ret

000008f6 <__udivmodsi4>:
 8f6:	a1 e2       	ldi	r26, 0x21	; 33
 8f8:	1a 2e       	mov	r1, r26
 8fa:	aa 1b       	sub	r26, r26
 8fc:	bb 1b       	sub	r27, r27
 8fe:	fd 01       	movw	r30, r26
 900:	0d c0       	rjmp	.+26     	; 0x91c <__udivmodsi4_ep>

00000902 <__udivmodsi4_loop>:
 902:	aa 1f       	adc	r26, r26
 904:	bb 1f       	adc	r27, r27
 906:	ee 1f       	adc	r30, r30
 908:	ff 1f       	adc	r31, r31
 90a:	a2 17       	cp	r26, r18
 90c:	b3 07       	cpc	r27, r19
 90e:	e4 07       	cpc	r30, r20
 910:	f5 07       	cpc	r31, r21
 912:	20 f0       	brcs	.+8      	; 0x91c <__udivmodsi4_ep>
 914:	a2 1b       	sub	r26, r18
 916:	b3 0b       	sbc	r27, r19
 918:	e4 0b       	sbc	r30, r20
 91a:	f5 0b       	sbc	r31, r21

0000091c <__udivmodsi4_ep>:
 91c:	66 1f       	adc	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	1a 94       	dec	r1
 926:	69 f7       	brne	.-38     	; 0x902 <__udivmodsi4_loop>
 928:	60 95       	com	r22
 92a:	70 95       	com	r23
 92c:	80 95       	com	r24
 92e:	90 95       	com	r25
 930:	9b 01       	movw	r18, r22
 932:	ac 01       	movw	r20, r24
 934:	bd 01       	movw	r22, r26
 936:	cf 01       	movw	r24, r30
 938:	08 95       	ret

0000093a <__umulhisi3>:
 93a:	a2 9f       	mul	r26, r18
 93c:	b0 01       	movw	r22, r0
 93e:	b3 9f       	mul	r27, r19
 940:	c0 01       	movw	r24, r0
 942:	a3 9f       	mul	r26, r19
 944:	70 0d       	add	r23, r0
 946:	81 1d       	adc	r24, r1
 948:	11 24       	eor	r1, r1
 94a:	91 1d       	adc	r25, r1
 94c:	b2 9f       	mul	r27, r18
 94e:	70 0d       	add	r23, r0
 950:	81 1d       	adc	r24, r1
 952:	11 24       	eor	r1, r1
 954:	91 1d       	adc	r25, r1
 956:	08 95       	ret

00000958 <_exit>:
 958:	f8 94       	cli

0000095a <__stop_program>:
 95a:	ff cf       	rjmp	.-2      	; 0x95a <__stop_program>
