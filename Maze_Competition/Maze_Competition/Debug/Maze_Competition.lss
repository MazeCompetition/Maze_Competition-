
Maze_Competition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001a7c  00001b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  0080006e  0080006e  00001b1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a14  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2e  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e5  00000000  00000000  000055ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000734  00000000  00000000  00006db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab9  00000000  00000000  000074e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cc4  00000000  00000000  00007fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00009c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_4>
      14:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_5>
      18:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_6>
      1c:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_7>
      20:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__vector_8>
      24:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_9>
      28:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__vector_10>
      2c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 08 	call	0x1080	; 0x1080 <main>
      8a:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
      92:	fc 01       	movw	r30, r24
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <__system_time>
      9c:	70 91 d3 00 	lds	r23, 0x00D3	; 0x8000d3 <__system_time+0x1>
      a0:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__system_time+0x2>
      a4:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <__system_time+0x3>
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	30 97       	sbiw	r30, 0x00	; 0
      ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
      ae:	60 83       	st	Z, r22
      b0:	71 83       	std	Z+1, r23	; 0x01
      b2:	82 83       	std	Z+2, r24	; 0x02
      b4:	93 83       	std	Z+3, r25	; 0x03
      b6:	08 95       	ret

000000b8 <DC_Motor_Init>:
//		|------------------------------------------------------------------|



void DC_Motor_Init(struct GPIO_t * GPIOx , uint8_t PinForward , uint8_t PinBackward )
{
      b8:	df 92       	push	r13
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	2e 97       	sbiw	r28, 0x0e	; 14
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
      d6:	8c 01       	movw	r16, r24
      d8:	d6 2e       	mov	r13, r22
      da:	e4 2e       	mov	r14, r20
	TIMER0_CFG_t DC_Motor_cfg;
	DC_Motor_cfg.COM0 = COM0_Clear;
      dc:	80 e2       	ldi	r24, 0x20	; 32
      de:	8c 83       	std	Y+4, r24	; 0x04
	DC_Motor_cfg.CS0 = CS0_256;
      e0:	84 e0       	ldi	r24, 0x04	; 4
      e2:	8d 83       	std	Y+5, r24	; 0x05
	DC_Motor_cfg.INT0_EN = INT0_EN_Disable;
      e4:	18 86       	std	Y+8, r1	; 0x08
	DC_Motor_cfg.OutCR0 = 0;
      e6:	1f 82       	std	Y+7, r1	; 0x07
	DC_Motor_cfg.P_OCIE0 = NULL;
      e8:	1c 86       	std	Y+12, r1	; 0x0c
      ea:	1b 86       	std	Y+11, r1	; 0x0b
	DC_Motor_cfg.P_TOIE0 = NULL;
      ec:	1a 86       	std	Y+10, r1	; 0x0a
      ee:	19 86       	std	Y+9, r1	; 0x09
	DC_Motor_cfg.TCNT0 = 0x00;
      f0:	1e 82       	std	Y+6, r1	; 0x06
	DC_Motor_cfg.TIMNUM = TIMNUM_0;
      f2:	19 82       	std	Y+1, r1	; 0x01
	DC_Motor_cfg.WGM0 = WGM0_PhaseCorrect;
      f4:	80 e4       	ldi	r24, 0x40	; 64
      f6:	8a 83       	std	Y+2, r24	; 0x02
	
	MCAL_TIMER0_INIT(&DC_Motor_cfg);
      f8:	ce 01       	movw	r24, r28
      fa:	01 96       	adiw	r24, 0x01	; 1
      fc:	0e 94 db 08 	call	0x11b6	; 0x11b6 <MCAL_TIMER0_INIT>
	
	struct GPIO_CFG_t gpio_cfg;
	gpio_cfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     100:	ff 24       	eor	r15, r15
     102:	f3 94       	inc	r15
     104:	fe 86       	std	Y+14, r15	; 0x0e
	gpio_cfg.GPIO_PinNumber = PinForward;
     106:	dd 86       	std	Y+13, r13	; 0x0d
	MCAL_GPIO_INIT_PIN(GPIOx , &gpio_cfg);
     108:	be 01       	movw	r22, r28
     10a:	63 5f       	subi	r22, 0xF3	; 243
     10c:	7f 4f       	sbci	r23, 0xFF	; 255
     10e:	c8 01       	movw	r24, r16
     110:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>

	gpio_cfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     114:	fe 86       	std	Y+14, r15	; 0x0e
	gpio_cfg.GPIO_PinNumber = PinBackward;
     116:	ed 86       	std	Y+13, r14	; 0x0d
	MCAL_GPIO_INIT_PIN(GPIOx , &gpio_cfg);
     118:	be 01       	movw	r22, r28
     11a:	63 5f       	subi	r22, 0xF3	; 243
     11c:	7f 4f       	sbci	r23, 0xFF	; 255
     11e:	c8 01       	movw	r24, r16
     120:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>

	
}
     124:	2e 96       	adiw	r28, 0x0e	; 14
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	df 90       	pop	r13
     13e:	08 95       	ret

00000140 <LCD_WRITE_COMMAND>:



void LCD_WRITE_COMMAND(unsigned char command){
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_CTRL = (LCD_CTRL & LCD_WRITE_INSTRUCTION);
     140:	4b b3       	in	r20, 0x1b	; 27
	LCD_DATA = ((LCD_DATA & LCD_INPUT_PINS) | ((command & 0xF0) >> MOST_BIT_PIN));
     142:	98 2f       	mov	r25, r24
     144:	90 7f       	andi	r25, 0xF0	; 240
     146:	29 2f       	mov	r18, r25
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	35 95       	asr	r19
     14c:	27 95       	ror	r18
     14e:	94 2f       	mov	r25, r20
     150:	95 78       	andi	r25, 0x85	; 133
     152:	29 2b       	or	r18, r25
	LCD_ENABLE;
     154:	24 60       	ori	r18, 0x04	; 4
     156:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	e3 ed       	ldi	r30, 0xD3	; 211
     15a:	f0 e3       	ldi	r31, 0x30	; 48
     15c:	31 97       	sbiw	r30, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_WRITE_COMMAND+0x1c>
     160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_WRITE_COMMAND+0x22>
     162:	00 00       	nop
     164:	9b b3       	in	r25, 0x1b	; 27
     166:	9b 7f       	andi	r25, 0xFB	; 251
     168:	9b bb       	out	0x1b, r25	; 27
     16a:	ef e4       	ldi	r30, 0x4F	; 79
     16c:	f3 ec       	ldi	r31, 0xC3	; 195
     16e:	31 97       	sbiw	r30, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <LCD_WRITE_COMMAND+0x2e>
     172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_WRITE_COMMAND+0x34>
     174:	00 00       	nop
	LCD_CTRL = (LCD_CTRL & LCD_WRITE_INSTRUCTION);
     176:	2b b3       	in	r18, 0x1b	; 27
	LCD_DATA = ((LCD_DATA & LCD_INPUT_PINS) | ((command & 0x0F) << LEAST_BIT_PIN));
     178:	8f 70       	andi	r24, 0x0F	; 15
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	92 2f       	mov	r25, r18
     18a:	95 78       	andi	r25, 0x85	; 133
     18c:	89 2b       	or	r24, r25
	LCD_ENABLE;
     18e:	84 60       	ori	r24, 0x04	; 4
     190:	8b bb       	out	0x1b, r24	; 27
     192:	83 ed       	ldi	r24, 0xD3	; 211
     194:	90 e3       	ldi	r25, 0x30	; 48
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <LCD_WRITE_COMMAND+0x56>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_WRITE_COMMAND+0x5c>
     19c:	00 00       	nop
     19e:	8b b3       	in	r24, 0x1b	; 27
     1a0:	8b 7f       	andi	r24, 0xFB	; 251
     1a2:	8b bb       	out	0x1b, r24	; 27
     1a4:	ef e4       	ldi	r30, 0x4F	; 79
     1a6:	f3 ec       	ldi	r31, 0xC3	; 195
     1a8:	31 97       	sbiw	r30, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_WRITE_COMMAND+0x68>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_WRITE_COMMAND+0x6e>
     1ae:	00 00       	nop
     1b0:	08 95       	ret

000001b2 <LCD_INIT>:
     1b2:	87 e8       	ldi	r24, 0x87	; 135
     1b4:	93 e1       	ldi	r25, 0x13	; 19
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_INIT+0x4>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_INIT+0xa>
     1bc:	00 00       	nop
#ifdef FOUR_BIT_MODE

void LCD_INIT(){
	_delay_ms(20);
	//CONFIG_DATA_CTRL(OUTPUT,OUTPUT);
	LCD_CTRL &= ~(1 << EN);
     1be:	8b b3       	in	r24, 0x1b	; 27
     1c0:	8b 7f       	andi	r24, 0xFB	; 251
     1c2:	8b bb       	out	0x1b, r24	; 27
	LCD_WRITE_COMMAND(LCD_Return_Home);
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON);
     1ca:	8c e0       	ldi	r24, 0x0C	; 12
     1cc:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_Clear_Display);
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_4BITS_2LINES_5X8);
     1d6:	88 e2       	ldi	r24, 0x28	; 40
     1d8:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
     1dc:	8f e0       	ldi	r24, 0x0F	; 15
     1de:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_WRITE_COMMAND>
     1e2:	08 95       	ret

000001e4 <Ultrasonic_Init>:
//		|=============APIs Supported by "MCAL GPIO DRIVER"=================|
//		|------------------------------------------------------------------|


void Ultrasonic_Init()
{
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	6c 97       	sbiw	r28, 0x1c	; 28
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
	TIMER1_CFG_t ultrasonic;
	ultrasonic.TIMNUM = TIMNUM_1;	
     1fa:	11 e0       	ldi	r17, 0x01	; 1
     1fc:	19 83       	std	Y+1, r17	; 0x01
	ultrasonic.ICNC1 = ICNC1_Disable;		
     1fe:	1c 82       	std	Y+4, r1	; 0x04
	ultrasonic.ICES1 = ICES1_RisingEdge;	
     200:	80 e4       	ldi	r24, 0x40	; 64
     202:	8d 83       	std	Y+5, r24	; 0x05
	ultrasonic.WGM1 = WGM1_Normal;
     204:	18 86       	std	Y+8, r1	; 0x08
	ultrasonic.COM1A = 0;
     206:	19 86       	std	Y+9, r1	; 0x09
	ultrasonic.COM1B = 0;
     208:	1a 86       	std	Y+10, r1	; 0x0a
	ultrasonic.CS1 = CS1_1024;
     20a:	85 e0       	ldi	r24, 0x05	; 5
     20c:	8b 87       	std	Y+11, r24	; 0x0b
	ultrasonic.TCNT1L = 0;
     20e:	1c 86       	std	Y+12, r1	; 0x0c
	ultrasonic.TCNT1H = 0;
     210:	1d 86       	std	Y+13, r1	; 0x0d
	ultrasonic.OCR1AL = 0;
     212:	1e 86       	std	Y+14, r1	; 0x0e
	ultrasonic.OCR1AH = 0;
     214:	1f 86       	std	Y+15, r1	; 0x0f
	ultrasonic.OCR1BL = 0;
     216:	18 8a       	std	Y+16, r1	; 0x10
	ultrasonic.OCR1BH = 0;		
     218:	19 8a       	std	Y+17, r1	; 0x11
	ultrasonic.INT1_EN = INT1_EN_Disable;
     21a:	1a 8a       	std	Y+18, r1	; 0x12
	
	struct GPIO_CFG_t gpiocfg;
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     21c:	1c 8f       	std	Y+28, r17	; 0x1c
	gpiocfg.GPIO_PinNumber = Trig1;
     21e:	1b 8e       	std	Y+27, r1	; 0x1b
	MCAL_GPIO_INIT_PIN(US_PORTx ,&gpiocfg );
     220:	be 01       	movw	r22, r28
     222:	65 5e       	subi	r22, 0xE5	; 229
     224:	7f 4f       	sbci	r23, 0xFF	; 255
     226:	80 e3       	ldi	r24, 0x30	; 48
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
	
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     22e:	1c 8f       	std	Y+28, r17	; 0x1c
	gpiocfg.GPIO_PinNumber = Trig2;
     230:	1b 8f       	std	Y+27, r17	; 0x1b
	MCAL_GPIO_INIT_PIN(US_PORTx ,&gpiocfg );
     232:	be 01       	movw	r22, r28
     234:	65 5e       	subi	r22, 0xE5	; 229
     236:	7f 4f       	sbci	r23, 0xFF	; 255
     238:	80 e3       	ldi	r24, 0x30	; 48
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
			
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     240:	1c 8f       	std	Y+28, r17	; 0x1c
	gpiocfg.GPIO_PinNumber = Trig3;
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	8b 8f       	std	Y+27, r24	; 0x1b
	MCAL_GPIO_INIT_PIN(US_PORTx ,&gpiocfg );
     246:	be 01       	movw	r22, r28
     248:	65 5e       	subi	r22, 0xE5	; 229
     24a:	7f 4f       	sbci	r23, 0xFF	; 255
     24c:	80 e3       	ldi	r24, 0x30	; 48
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
				
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     254:	1c 8f       	std	Y+28, r17	; 0x1c
	gpiocfg.GPIO_PinNumber = Trig4;
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	8b 8f       	std	Y+27, r24	; 0x1b
	MCAL_GPIO_INIT_PIN(US_PORTx ,&gpiocfg );
     25a:	be 01       	movw	r22, r28
     25c:	65 5e       	subi	r22, 0xE5	; 229
     25e:	7f 4f       	sbci	r23, 0xFF	; 255
     260:	80 e3       	ldi	r24, 0x30	; 48
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
		
	MCAL_TIMER1_INIT(&ultrasonic);
     268:	ce 01       	movw	r24, r28
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	0e 94 2c 09 	call	0x1258	; 0x1258 <MCAL_TIMER1_INIT>
}
     270:	6c 96       	adiw	r28, 0x1c	; 28
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	f8 94       	cli
     276:	de bf       	out	0x3e, r29	; 62
     278:	0f be       	out	0x3f, r0	; 63
     27a:	cd bf       	out	0x3d, r28	; 61
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	08 95       	ret

00000284 <Ultrasonic_Read>:

float Ultrasonic_Read(uint8_t UltNum)
{
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
	uint32_t Val = 0;
	float distance = 0;
	if (UltNum == 1)
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	99 f4       	brne	.+38     	; 0x2b6 <Ultrasonic_Read+0x32>
	{
		MCAL_GPIO_WRITE_PIN(US_PORTx , Trig1 , 1);
     290:	41 e0       	ldi	r20, 0x01	; 1
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	80 e3       	ldi	r24, 0x30	; 48
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCAL_GPIO_WRITE_PIN>
     29c:	83 ec       	ldi	r24, 0xC3	; 195
     29e:	99 e0       	ldi	r25, 0x09	; 9
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <Ultrasonic_Read+0x1c>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <Ultrasonic_Read+0x22>
     2a6:	00 00       	nop
		_delay_ms(10);
		MCAL_GPIO_WRITE_PIN(US_PORTx , Trig1 , 0);		
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	80 e3       	ldi	r24, 0x30	; 48
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCAL_GPIO_WRITE_PIN>
     2b4:	3e c0       	rjmp	.+124    	; 0x332 <Ultrasonic_Read+0xae>
	}
	else if (UltNum == 2)
     2b6:	82 30       	cpi	r24, 0x02	; 2
     2b8:	99 f4       	brne	.+38     	; 0x2e0 <Ultrasonic_Read+0x5c>
	{
		MCAL_GPIO_WRITE_PIN(US_PORTx , Trig2 , 1);
     2ba:	41 e0       	ldi	r20, 0x01	; 1
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	80 e3       	ldi	r24, 0x30	; 48
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCAL_GPIO_WRITE_PIN>
     2c6:	83 ec       	ldi	r24, 0xC3	; 195
     2c8:	99 e0       	ldi	r25, 0x09	; 9
     2ca:	01 97       	sbiw	r24, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <Ultrasonic_Read+0x46>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <Ultrasonic_Read+0x4c>
     2d0:	00 00       	nop
		_delay_ms(10);
		MCAL_GPIO_WRITE_PIN(US_PORTx , Trig2 , 0);
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	80 e3       	ldi	r24, 0x30	; 48
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCAL_GPIO_WRITE_PIN>
     2de:	29 c0       	rjmp	.+82     	; 0x332 <Ultrasonic_Read+0xae>
				
	}
	else if (UltNum == 3)
     2e0:	83 30       	cpi	r24, 0x03	; 3
     2e2:	99 f4       	brne	.+38     	; 0x30a <Ultrasonic_Read+0x86>
	{
		MCAL_GPIO_WRITE_PIN(US_PORTx , Trig3 , 1);
     2e4:	41 e0       	ldi	r20, 0x01	; 1
     2e6:	62 e0       	ldi	r22, 0x02	; 2
     2e8:	80 e3       	ldi	r24, 0x30	; 48
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCAL_GPIO_WRITE_PIN>
     2f0:	83 ec       	ldi	r24, 0xC3	; 195
     2f2:	99 e0       	ldi	r25, 0x09	; 9
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <Ultrasonic_Read+0x70>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <Ultrasonic_Read+0x76>
     2fa:	00 00       	nop
		_delay_ms(10);
		MCAL_GPIO_WRITE_PIN(US_PORTx , Trig3 , 0);
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	62 e0       	ldi	r22, 0x02	; 2
     300:	80 e3       	ldi	r24, 0x30	; 48
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCAL_GPIO_WRITE_PIN>
     308:	14 c0       	rjmp	.+40     	; 0x332 <Ultrasonic_Read+0xae>
		
	}
	else if (UltNum == 4)
     30a:	84 30       	cpi	r24, 0x04	; 4
     30c:	91 f4       	brne	.+36     	; 0x332 <Ultrasonic_Read+0xae>
	{
		MCAL_GPIO_WRITE_PIN(US_PORTx , Trig4 , 1);
     30e:	41 e0       	ldi	r20, 0x01	; 1
     310:	63 e0       	ldi	r22, 0x03	; 3
     312:	80 e3       	ldi	r24, 0x30	; 48
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCAL_GPIO_WRITE_PIN>
     31a:	83 ec       	ldi	r24, 0xC3	; 195
     31c:	99 e0       	ldi	r25, 0x09	; 9
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <Ultrasonic_Read+0x9a>
     322:	00 c0       	rjmp	.+0      	; 0x324 <Ultrasonic_Read+0xa0>
     324:	00 00       	nop
		_delay_ms(10);
		MCAL_GPIO_WRITE_PIN(US_PORTx , Trig4 , 0);
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	63 e0       	ldi	r22, 0x03	; 3
     32a:	80 e3       	ldi	r24, 0x30	; 48
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCAL_GPIO_WRITE_PIN>
			
	}
	

	while(!(TIMCOM->TIFR &(1 << 5)));
     332:	88 b7       	in	r24, 0x38	; 56
     334:	85 ff       	sbrs	r24, 5
     336:	fd cf       	rjmp	.-6      	; 0x332 <Ultrasonic_Read+0xae>
	TIMCOM->TIFR |= (1 << 5);
     338:	80 62       	ori	r24, 0x20	; 32
     33a:	88 bf       	out	0x38, r24	; 56
	Timer1->TCNT1H = 0;
     33c:	1d bc       	out	0x2d, r1	; 45
	Timer1->TCNT1L = 0;
     33e:	1c bc       	out	0x2c, r1	; 44
	Timer1->TCCR1B = (Timer1->TCCR1B & ~(1 << 6)) | ICES1_FallingEdge;
     340:	8e b5       	in	r24, 0x2e	; 46
     342:	8f 7b       	andi	r24, 0xBF	; 191
     344:	8e bd       	out	0x2e, r24	; 46
	while(!(TIMCOM->TIFR &(1 << 5)));
     346:	28 b7       	in	r18, 0x38	; 56
     348:	25 ff       	sbrs	r18, 5
     34a:	fd cf       	rjmp	.-6      	; 0x346 <Ultrasonic_Read+0xc2>
	
	Val |= Timer1->ICR1L;
     34c:	96 b5       	in	r25, 0x26	; 38
	Val |= (Timer1->ICR1H << 8);
     34e:	47 b5       	in	r20, 0x27	; 39
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	54 2f       	mov	r21, r20
     354:	44 27       	eor	r20, r20
     356:	05 2e       	mov	r0, r21
     358:	00 0c       	add	r0, r0
     35a:	66 0b       	sbc	r22, r22
     35c:	77 0b       	sbc	r23, r23
     35e:	7a 01       	movw	r14, r20
     360:	8b 01       	movw	r16, r22
     362:	e9 2a       	or	r14, r25
     364:	c8 01       	movw	r24, r16
     366:	b7 01       	movw	r22, r14
	
	TIMCOM->TIFR |= (1 << 5);
     368:	20 62       	ori	r18, 0x20	; 32
     36a:	28 bf       	out	0x38, r18	; 56
	distance = (((float)Val/7812.5) * 343 / (float)2 ) * 100 ;
     36c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	34 e2       	ldi	r19, 0x24	; 36
     374:	44 ef       	ldi	r20, 0xF4	; 244
     376:	55 e4       	ldi	r21, 0x45	; 69
     378:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divsf3>
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e8       	ldi	r19, 0x80	; 128
     380:	4b ea       	ldi	r20, 0xAB	; 171
     382:	53 e4       	ldi	r21, 0x43	; 67
     384:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__mulsf3>
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	5f e3       	ldi	r21, 0x3F	; 63
     390:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__mulsf3>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	48 ec       	ldi	r20, 0xC8	; 200
     39a:	52 e4       	ldi	r21, 0x42	; 66
     39c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__mulsf3>
	
	Timer1->TCCR1B = (Timer1->TCCR1B & ~(1 << 6)) | ICES1_RisingEdge;
     3a0:	2e b5       	in	r18, 0x2e	; 46
     3a2:	20 64       	ori	r18, 0x40	; 64
     3a4:	2e bd       	out	0x2e, r18	; 46
	return distance;	
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	08 95       	ret

000003b0 <LCDInit>:
    }
	
	 return 0 ;
}
void LCDInit()
{
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <LCDInit+0x8>
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
	struct GPIO_CFG_t gpiocfg;
	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_1;
     3bc:	11 e0       	ldi	r17, 0x01	; 1
     3be:	19 83       	std	Y+1, r17	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     3c0:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
     3c2:	be 01       	movw	r22, r28
     3c4:	6f 5f       	subi	r22, 0xFF	; 255
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	89 e3       	ldi	r24, 0x39	; 57
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>

	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_2;
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     3d4:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
     3d6:	be 01       	movw	r22, r28
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	89 e3       	ldi	r24, 0x39	; 57
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>

	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_3;
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     3e8:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
     3ea:	be 01       	movw	r22, r28
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	89 e3       	ldi	r24, 0x39	; 57
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
	
	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_4;
     3f8:	84 e0       	ldi	r24, 0x04	; 4
     3fa:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     3fc:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
     3fe:	be 01       	movw	r22, r28
     400:	6f 5f       	subi	r22, 0xFF	; 255
     402:	7f 4f       	sbci	r23, 0xFF	; 255
     404:	89 e3       	ldi	r24, 0x39	; 57
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>

	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_5;
     40c:	85 e0       	ldi	r24, 0x05	; 5
     40e:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     410:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
     412:	be 01       	movw	r22, r28
     414:	6f 5f       	subi	r22, 0xFF	; 255
     416:	7f 4f       	sbci	r23, 0xFF	; 255
     418:	89 e3       	ldi	r24, 0x39	; 57
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>

	gpiocfg.GPIO_PinNumber = GPIO_PinNumber_6;
     420:	86 e0       	ldi	r24, 0x06	; 6
     422:	89 83       	std	Y+1, r24	; 0x01
	gpiocfg.GPIO_Mode = GPIO_Mode_OUTPUT;
     424:	1a 83       	std	Y+2, r17	; 0x02
	MCAL_GPIO_INIT_PIN(PORTA , &gpiocfg);
     426:	be 01       	movw	r22, r28
     428:	6f 5f       	subi	r22, 0xFF	; 255
     42a:	7f 4f       	sbci	r23, 0xFF	; 255
     42c:	89 e3       	ldi	r24, 0x39	; 57
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
	
	LCD_INIT();
     434:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_INIT>
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	08 95       	ret

00000444 <get_status>:


void get_status(void)
{
	
	if(Ultrasonic_Read(Front) > 13)
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e5       	ldi	r20, 0x50	; 80
     450:	51 e4       	ldi	r21, 0x41	; 65
     452:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     456:	18 16       	cp	r1, r24
     458:	24 f4       	brge	.+8      	; 0x462 <get_status+0x1e>
	   state[Front] = 'F' ;
     45a:	86 e4       	ldi	r24, 0x46	; 70
     45c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end+0x2>
     460:	02 c0       	rjmp	.+4      	; 0x466 <get_status+0x22>
	 else 
	   state[Front] = 0 ;
     462:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end+0x2>
	 
	if(Ultrasonic_Read(Right) > 13)
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e5       	ldi	r20, 0x50	; 80
     472:	51 e4       	ldi	r21, 0x41	; 65
     474:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     478:	18 16       	cp	r1, r24
     47a:	24 f4       	brge	.+8      	; 0x484 <get_status+0x40>
	    state[Right] = 'R' ;
     47c:	82 e5       	ldi	r24, 0x52	; 82
     47e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
     482:	02 c0       	rjmp	.+4      	; 0x488 <get_status+0x44>
	else
		state[Right] = 0 ;
     484:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
		
	if(Ultrasonic_Read(Left) > 13)
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 e5       	ldi	r20, 0x50	; 80
     494:	51 e4       	ldi	r21, 0x41	; 65
     496:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     49a:	18 16       	cp	r1, r24
     49c:	24 f4       	brge	.+8      	; 0x4a6 <get_status+0x62>
		state[Left] = 'L' ;
     49e:	8c e4       	ldi	r24, 0x4C	; 76
     4a0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__data_end+0x1>
     4a4:	08 95       	ret
	else
		state[Left] = 0 ;	   
     4a6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x1>
     4aa:	08 95       	ret

000004ac <get_random_action>:
}
uint8_t get_random_action(uint8_t upper )
{
     4ac:	cf 93       	push	r28
     4ae:	c8 2f       	mov	r28, r24
		return (rand()%upper);
     4b0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <rand>
     4b4:	6c 2f       	mov	r22, r28
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__divmodhi4>
}
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <north_updater>:
{
	//this function will return new north depend on the previous north && taken action
	//parameters :
	// usual_action: taked action , north: north at the usual action
	//return :
	if (north == 'F' && usual_action == 'L')
     4c0:	66 34       	cpi	r22, 0x46	; 70
     4c2:	29 f4       	brne	.+10     	; 0x4ce <north_updater+0xe>
     4c4:	8c 34       	cpi	r24, 0x4C	; 76
     4c6:	19 f4       	brne	.+6      	; 0x4ce <north_updater+0xe>
	new_north = 'R';
     4c8:	92 e5       	ldi	r25, 0x52	; 82
     4ca:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	//##################################################
	// updated north after taking usual_action with the north
	//if action is B or F north does not change
	if (north == 'F' && usual_action == 'F' )
     4ce:	66 34       	cpi	r22, 0x46	; 70
     4d0:	29 f4       	brne	.+10     	; 0x4dc <north_updater+0x1c>
     4d2:	86 34       	cpi	r24, 0x46	; 70
     4d4:	19 f4       	brne	.+6      	; 0x4dc <north_updater+0x1c>
	new_north = 'F';
     4d6:	96 e4       	ldi	r25, 0x46	; 70
     4d8:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'F' && usual_action == 'B')
     4dc:	66 34       	cpi	r22, 0x46	; 70
     4de:	29 f4       	brne	.+10     	; 0x4ea <north_updater+0x2a>
     4e0:	82 34       	cpi	r24, 0x42	; 66
     4e2:	19 f4       	brne	.+6      	; 0x4ea <north_updater+0x2a>
	new_north = 'B';
     4e4:	92 e4       	ldi	r25, 0x42	; 66
     4e6:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'F' && usual_action == 'R')
     4ea:	66 34       	cpi	r22, 0x46	; 70
     4ec:	29 f4       	brne	.+10     	; 0x4f8 <north_updater+0x38>
     4ee:	82 35       	cpi	r24, 0x52	; 82
     4f0:	19 f4       	brne	.+6      	; 0x4f8 <north_updater+0x38>
	new_north = 'L';
     4f2:	9c e4       	ldi	r25, 0x4C	; 76
     4f4:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'B' && usual_action == 'F')
     4f8:	62 34       	cpi	r22, 0x42	; 66
     4fa:	29 f4       	brne	.+10     	; 0x506 <north_updater+0x46>
     4fc:	86 34       	cpi	r24, 0x46	; 70
     4fe:	19 f4       	brne	.+6      	; 0x506 <north_updater+0x46>
	new_north = 'B';
     500:	92 e4       	ldi	r25, 0x42	; 66
     502:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'B' && usual_action == 'B')
     506:	62 34       	cpi	r22, 0x42	; 66
     508:	29 f4       	brne	.+10     	; 0x514 <north_updater+0x54>
     50a:	82 34       	cpi	r24, 0x42	; 66
     50c:	19 f4       	brne	.+6      	; 0x514 <north_updater+0x54>
	new_north = 'F';
     50e:	96 e4       	ldi	r25, 0x46	; 70
     510:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'B' && usual_action == 'R')
     514:	62 34       	cpi	r22, 0x42	; 66
     516:	29 f4       	brne	.+10     	; 0x522 <north_updater+0x62>
     518:	82 35       	cpi	r24, 0x52	; 82
     51a:	19 f4       	brne	.+6      	; 0x522 <north_updater+0x62>
	new_north = 'R';
     51c:	92 e5       	ldi	r25, 0x52	; 82
     51e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'B' && usual_action == 'L')
     522:	62 34       	cpi	r22, 0x42	; 66
     524:	29 f4       	brne	.+10     	; 0x530 <north_updater+0x70>
     526:	8c 34       	cpi	r24, 0x4C	; 76
     528:	19 f4       	brne	.+6      	; 0x530 <north_updater+0x70>
	new_north = 'L';
     52a:	9c e4       	ldi	r25, 0x4C	; 76
     52c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	//##################################################
	if (north == 'R' && usual_action == 'F')
     530:	62 35       	cpi	r22, 0x52	; 82
     532:	29 f4       	brne	.+10     	; 0x53e <north_updater+0x7e>
     534:	86 34       	cpi	r24, 0x46	; 70
     536:	19 f4       	brne	.+6      	; 0x53e <north_updater+0x7e>
	new_north = 'R';
     538:	92 e5       	ldi	r25, 0x52	; 82
     53a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'R' && usual_action == 'B')
     53e:	62 35       	cpi	r22, 0x52	; 82
     540:	29 f4       	brne	.+10     	; 0x54c <north_updater+0x8c>
     542:	82 34       	cpi	r24, 0x42	; 66
     544:	19 f4       	brne	.+6      	; 0x54c <north_updater+0x8c>
	new_north = 'L';
     546:	9c e4       	ldi	r25, 0x4C	; 76
     548:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'R' && usual_action == 'R')
     54c:	62 35       	cpi	r22, 0x52	; 82
     54e:	29 f4       	brne	.+10     	; 0x55a <north_updater+0x9a>
     550:	82 35       	cpi	r24, 0x52	; 82
     552:	19 f4       	brne	.+6      	; 0x55a <north_updater+0x9a>
	new_north = 'F';
     554:	96 e4       	ldi	r25, 0x46	; 70
     556:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'R' && usual_action == 'L')
     55a:	62 35       	cpi	r22, 0x52	; 82
     55c:	29 f4       	brne	.+10     	; 0x568 <north_updater+0xa8>
     55e:	8c 34       	cpi	r24, 0x4C	; 76
     560:	19 f4       	brne	.+6      	; 0x568 <north_updater+0xa8>
	new_north = 'B';
     562:	92 e4       	ldi	r25, 0x42	; 66
     564:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	//################################################
	if (north == 'L' && usual_action == 'F')
     568:	6c 34       	cpi	r22, 0x4C	; 76
     56a:	29 f4       	brne	.+10     	; 0x576 <north_updater+0xb6>
     56c:	86 34       	cpi	r24, 0x46	; 70
     56e:	19 f4       	brne	.+6      	; 0x576 <north_updater+0xb6>
	new_north = 'L';
     570:	9c e4       	ldi	r25, 0x4C	; 76
     572:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'L' && usual_action == 'B')
     576:	6c 34       	cpi	r22, 0x4C	; 76
     578:	29 f4       	brne	.+10     	; 0x584 <north_updater+0xc4>
     57a:	82 34       	cpi	r24, 0x42	; 66
     57c:	19 f4       	brne	.+6      	; 0x584 <north_updater+0xc4>
	new_north = 'R';
     57e:	92 e5       	ldi	r25, 0x52	; 82
     580:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'L' && usual_action == 'R')
     584:	6c 34       	cpi	r22, 0x4C	; 76
     586:	29 f4       	brne	.+10     	; 0x592 <north_updater+0xd2>
     588:	82 35       	cpi	r24, 0x52	; 82
     58a:	19 f4       	brne	.+6      	; 0x592 <north_updater+0xd2>
	new_north = 'B';
     58c:	92 e4       	ldi	r25, 0x42	; 66
     58e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <new_north>
	if (north == 'L' && usual_action == 'L')
     592:	6c 34       	cpi	r22, 0x4C	; 76
     594:	29 f4       	brne	.+10     	; 0x5a0 <north_updater+0xe0>
     596:	8c 34       	cpi	r24, 0x4C	; 76
     598:	19 f4       	brne	.+6      	; 0x5a0 <north_updater+0xe0>
	new_north = 'F';
     59a:	86 e4       	ldi	r24, 0x46	; 70
     59c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <new_north>
	
	return new_north ;
}
     5a0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <new_north>
     5a4:	08 95       	ret

000005a6 <reverse_usaual_direction>:


uint8_t reverse_usaual_direction(uint8_t direction)
{
	if (direction == 'R')
     5a6:	82 35       	cpi	r24, 0x52	; 82
     5a8:	41 f0       	breq	.+16     	; 0x5ba <reverse_usaual_direction+0x14>
	return 'L';
	else if (direction == 'L')
     5aa:	8c 34       	cpi	r24, 0x4C	; 76
     5ac:	41 f0       	breq	.+16     	; 0x5be <reverse_usaual_direction+0x18>
	return 'R';
	else if (direction == 'F')
     5ae:	86 34       	cpi	r24, 0x46	; 70
     5b0:	41 f0       	breq	.+16     	; 0x5c2 <reverse_usaual_direction+0x1c>
	return 'B';
	else if (direction == 'B')
     5b2:	82 34       	cpi	r24, 0x42	; 66
     5b4:	41 f4       	brne	.+16     	; 0x5c6 <reverse_usaual_direction+0x20>
	return 'F';
     5b6:	86 e4       	ldi	r24, 0x46	; 70
     5b8:	08 95       	ret


uint8_t reverse_usaual_direction(uint8_t direction)
{
	if (direction == 'R')
	return 'L';
     5ba:	8c e4       	ldi	r24, 0x4C	; 76
     5bc:	08 95       	ret
	else if (direction == 'L')
	return 'R';
     5be:	82 e5       	ldi	r24, 0x52	; 82
     5c0:	08 95       	ret
	else if (direction == 'F')
	return 'B';
     5c2:	82 e4       	ldi	r24, 0x42	; 66
     5c4:	08 95       	ret
	else if (direction == 'B')
	return 'F';
	
	return 'R';
     5c6:	82 e5       	ldi	r24, 0x52	; 82
}
     5c8:	08 95       	ret

000005ca <reverse_Copass_direction>:

uint8_t reverse_Copass_direction(uint8_t direction)
{
	if (direction == 'W')
     5ca:	87 35       	cpi	r24, 0x57	; 87
     5cc:	31 f0       	breq	.+12     	; 0x5da <reverse_Copass_direction+0x10>
	return 'E';
	else if (direction == 'N')
     5ce:	8e 34       	cpi	r24, 0x4E	; 78
     5d0:	31 f0       	breq	.+12     	; 0x5de <reverse_Copass_direction+0x14>
	return 'S';
	else if (direction == 'S')
     5d2:	83 35       	cpi	r24, 0x53	; 83
     5d4:	31 f4       	brne	.+12     	; 0x5e2 <reverse_Copass_direction+0x18>
	return 'N';
     5d6:	8e e4       	ldi	r24, 0x4E	; 78
     5d8:	08 95       	ret
}

uint8_t reverse_Copass_direction(uint8_t direction)
{
	if (direction == 'W')
	return 'E';
     5da:	85 e4       	ldi	r24, 0x45	; 69
     5dc:	08 95       	ret
	else if (direction == 'N')
	return 'S';
     5de:	83 e5       	ldi	r24, 0x53	; 83
     5e0:	08 95       	ret
	else if (direction == 'S')
	return 'N';
	else if (direction == 'E')
	return 'W';
     5e2:	87 e5       	ldi	r24, 0x57	; 87
	
	return 'W'; 
}
     5e4:	08 95       	ret

000005e6 <index_of>:
	}
	//new_north = north_updater(usual_action , north);
}

uint8_t index_of(uint8_t * arr , uint8_t element)
{
     5e6:	ac 01       	movw	r20, r24
	for(uint8_t i = 0 ; i < 4 ; i++)
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	07 c0       	rjmp	.+14     	; 0x5fa <index_of+0x14>
	{
		if(element == arr[i])
     5ec:	fa 01       	movw	r30, r20
     5ee:	e9 0f       	add	r30, r25
     5f0:	f1 1d       	adc	r31, r1
     5f2:	20 81       	ld	r18, Z
     5f4:	26 17       	cp	r18, r22
     5f6:	29 f0       	breq	.+10     	; 0x602 <index_of+0x1c>
	//new_north = north_updater(usual_action , north);
}

uint8_t index_of(uint8_t * arr , uint8_t element)
{
	for(uint8_t i = 0 ; i < 4 ; i++)
     5f8:	9f 5f       	subi	r25, 0xFF	; 255
     5fa:	94 30       	cpi	r25, 0x04	; 4
     5fc:	b8 f3       	brcs	.-18     	; 0x5ec <index_of+0x6>
		if(element == arr[i])
		{
			return i ;
		}
	}
	return -1 ; 
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	08 95       	ret
{
	for(uint8_t i = 0 ; i < 4 ; i++)
	{
		if(element == arr[i])
		{
			return i ;
     602:	89 2f       	mov	r24, r25
		}
	}
	return -1 ; 
}
     604:	08 95       	ret

00000606 <compass_direction_to_usual_direction>:
	
	return 'W'; 
}

void compass_direction_to_usual_direction(uint8_t comp_action,uint8_t north )
{
     606:	cf 93       	push	r28
     608:	c6 2f       	mov	r28, r22
	//#DO NOT CHANGE THE FOLLOWING ORDER
	
	
	

	if (north == 'F')
     60a:	66 34       	cpi	r22, 0x46	; 70
     60c:	69 f4       	brne	.+26     	; 0x628 <compass_direction_to_usual_direction+0x22>
	{
		//same index
		usual_action = usual_actions[index_of(comp_actions,comp_action)];
     60e:	68 2f       	mov	r22, r24
     610:	89 e6       	ldi	r24, 0x69	; 105
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <index_of>
     618:	e8 2f       	mov	r30, r24
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	eb 59       	subi	r30, 0x9B	; 155
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	80 81       	ld	r24, Z
     622:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
     626:	49 c0       	rjmp	.+146    	; 0x6ba <compass_direction_to_usual_direction+0xb4>
	}
	
	
	else if (north == 'B')
     628:	62 34       	cpi	r22, 0x42	; 66
     62a:	79 f4       	brne	.+30     	; 0x64a <compass_direction_to_usual_direction+0x44>
	{
		usual_action = usual_actions[index_of(comp_actions,comp_action)];
     62c:	68 2f       	mov	r22, r24
     62e:	89 e6       	ldi	r24, 0x69	; 105
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <index_of>
     636:	e8 2f       	mov	r30, r24
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	eb 59       	subi	r30, 0x9B	; 155
     63c:	ff 4f       	sbci	r31, 0xFF	; 255
		usual_action = reverse_usaual_direction(usual_action);
     63e:	80 81       	ld	r24, Z
     640:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <reverse_usaual_direction>
     644:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
     648:	38 c0       	rjmp	.+112    	; 0x6ba <compass_direction_to_usual_direction+0xb4>
	}
	else if (north == 'R')
     64a:	62 35       	cpi	r22, 0x52	; 82
     64c:	e9 f4       	brne	.+58     	; 0x688 <compass_direction_to_usual_direction+0x82>
	{
		if (comp_action == 'N' || comp_action == 'S')
     64e:	8e 34       	cpi	r24, 0x4E	; 78
     650:	11 f0       	breq	.+4      	; 0x656 <compass_direction_to_usual_direction+0x50>
     652:	83 35       	cpi	r24, 0x53	; 83
     654:	69 f4       	brne	.+26     	; 0x670 <compass_direction_to_usual_direction+0x6a>
		{
			usual_action = usual_actions[index_of(comp_actions,comp_action)-2];
     656:	68 2f       	mov	r22, r24
     658:	89 e6       	ldi	r24, 0x69	; 105
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <index_of>
     660:	e8 2f       	mov	r30, r24
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	ed 59       	subi	r30, 0x9D	; 157
     666:	ff 4f       	sbci	r31, 0xFF	; 255
     668:	80 81       	ld	r24, Z
     66a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
     66e:	25 c0       	rjmp	.+74     	; 0x6ba <compass_direction_to_usual_direction+0xb4>
		}
		
		else if (comp_action == 'W')
     670:	87 35       	cpi	r24, 0x57	; 87
     672:	21 f4       	brne	.+8      	; 0x67c <compass_direction_to_usual_direction+0x76>
		{
			usual_action = 'F';
     674:	86 e4       	ldi	r24, 0x46	; 70
     676:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
     67a:	1f c0       	rjmp	.+62     	; 0x6ba <compass_direction_to_usual_direction+0xb4>
		}
		
		else if (comp_action == 'E')
     67c:	85 34       	cpi	r24, 0x45	; 69
     67e:	e9 f4       	brne	.+58     	; 0x6ba <compass_direction_to_usual_direction+0xb4>
		{
			usual_action = 'B';
     680:	82 e4       	ldi	r24, 0x42	; 66
     682:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
     686:	19 c0       	rjmp	.+50     	; 0x6ba <compass_direction_to_usual_direction+0xb4>
		}
	}
	else if (north == 'L')
     688:	6c 34       	cpi	r22, 0x4C	; 76
     68a:	b9 f4       	brne	.+46     	; 0x6ba <compass_direction_to_usual_direction+0xb4>
	{
		if (comp_action == 'N')
     68c:	8e 34       	cpi	r24, 0x4E	; 78
     68e:	21 f4       	brne	.+8      	; 0x698 <compass_direction_to_usual_direction+0x92>
		{
			usual_action = 'L';
     690:	8c e4       	ldi	r24, 0x4C	; 76
     692:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
     696:	11 c0       	rjmp	.+34     	; 0x6ba <compass_direction_to_usual_direction+0xb4>
		}
		else if (comp_action == 'S')
     698:	83 35       	cpi	r24, 0x53	; 83
     69a:	21 f4       	brne	.+8      	; 0x6a4 <compass_direction_to_usual_direction+0x9e>
		{
			usual_action = 'R';
     69c:	82 e5       	ldi	r24, 0x52	; 82
     69e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
     6a2:	0b c0       	rjmp	.+22     	; 0x6ba <compass_direction_to_usual_direction+0xb4>
		}
		else if (comp_action == 'E')
     6a4:	85 34       	cpi	r24, 0x45	; 69
     6a6:	21 f4       	brne	.+8      	; 0x6b0 <compass_direction_to_usual_direction+0xaa>
		{
			usual_action = 'F';
     6a8:	86 e4       	ldi	r24, 0x46	; 70
     6aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <compass_direction_to_usual_direction+0xb4>
		}
		else if (comp_action == 'W')
     6b0:	87 35       	cpi	r24, 0x57	; 87
     6b2:	19 f4       	brne	.+6      	; 0x6ba <compass_direction_to_usual_direction+0xb4>
		{
			usual_action = 'B';
     6b4:	82 e4       	ldi	r24, 0x42	; 66
     6b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <usual_action>
		}
	}
	new_north = north_updater(usual_action , north);
     6ba:	6c 2f       	mov	r22, r28
     6bc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <usual_action>
     6c0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <north_updater>
     6c4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <new_north>
}
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <usual_direction_to_compass_direction>:


void usual_direction_to_compass_direction(uint8_t usual_action,uint8_t north)
{
     6cc:	cf 93       	push	r28
     6ce:	c8 2f       	mov	r28, r24
	//#IMPORTANT NOTE : CODE DEPEND ON THE FOLLOWING ORDER OF COMP_ACTION && USUAL_ACTION LISTS
	//#DO NOT CHANGE THE FOLLOWING ORDER
	
	

	if (north == 'F')
     6d0:	66 34       	cpi	r22, 0x46	; 70
     6d2:	69 f4       	brne	.+26     	; 0x6ee <usual_direction_to_compass_direction+0x22>
	{
		//same index
		comp_action = comp_actions[index_of(usual_actions,usual_action)];
     6d4:	68 2f       	mov	r22, r24
     6d6:	85 e6       	ldi	r24, 0x65	; 101
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <index_of>
     6de:	e8 2f       	mov	r30, r24
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	e7 59       	subi	r30, 0x97	; 151
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255
     6e6:	80 81       	ld	r24, Z
     6e8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
     6ec:	40 c0       	rjmp	.+128    	; 0x76e <usual_direction_to_compass_direction+0xa2>
	}
	
	else if (north == 'B')
     6ee:	62 34       	cpi	r22, 0x42	; 66
     6f0:	31 f4       	brne	.+12     	; 0x6fe <usual_direction_to_compass_direction+0x32>
	{
		comp_action =comp_actions[index_of(usual_actions,usual_action)];
		comp_action = reverse_Copass_direction(usual_action);
     6f2:	8c 2f       	mov	r24, r28
     6f4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <reverse_Copass_direction>
     6f8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
     6fc:	38 c0       	rjmp	.+112    	; 0x76e <usual_direction_to_compass_direction+0xa2>
	}
	else if (north == 'R')
     6fe:	62 35       	cpi	r22, 0x52	; 82
     700:	e9 f4       	brne	.+58     	; 0x73c <usual_direction_to_compass_direction+0x70>
	{
		if (usual_action == 'N' || usual_action == 'S')
     702:	8e 34       	cpi	r24, 0x4E	; 78
     704:	11 f0       	breq	.+4      	; 0x70a <usual_direction_to_compass_direction+0x3e>
     706:	83 35       	cpi	r24, 0x53	; 83
     708:	69 f4       	brne	.+26     	; 0x724 <usual_direction_to_compass_direction+0x58>
		{
			comp_action = comp_actions[index_of(usual_actions,usual_action)-2];
     70a:	6c 2f       	mov	r22, r28
     70c:	85 e6       	ldi	r24, 0x65	; 101
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <index_of>
     714:	e8 2f       	mov	r30, r24
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	e9 59       	subi	r30, 0x99	; 153
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	80 81       	ld	r24, Z
     71e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
     722:	25 c0       	rjmp	.+74     	; 0x76e <usual_direction_to_compass_direction+0xa2>
		}
		
		else if (usual_action == 'F')
     724:	86 34       	cpi	r24, 0x46	; 70
     726:	21 f4       	brne	.+8      	; 0x730 <usual_direction_to_compass_direction+0x64>
		{
			comp_action = 'W';
     728:	87 e5       	ldi	r24, 0x57	; 87
     72a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
     72e:	1f c0       	rjmp	.+62     	; 0x76e <usual_direction_to_compass_direction+0xa2>
		}
		
		else if (usual_action == 'B')
     730:	82 34       	cpi	r24, 0x42	; 66
     732:	e9 f4       	brne	.+58     	; 0x76e <usual_direction_to_compass_direction+0xa2>
		{
			comp_action = 'E';
     734:	85 e4       	ldi	r24, 0x45	; 69
     736:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
     73a:	19 c0       	rjmp	.+50     	; 0x76e <usual_direction_to_compass_direction+0xa2>
		}
	}
	else if (north == 'L')
     73c:	6c 34       	cpi	r22, 0x4C	; 76
     73e:	b9 f4       	brne	.+46     	; 0x76e <usual_direction_to_compass_direction+0xa2>
	{
		if (usual_action == 'L')
     740:	8c 34       	cpi	r24, 0x4C	; 76
     742:	21 f4       	brne	.+8      	; 0x74c <usual_direction_to_compass_direction+0x80>
		{
			comp_action = 'N';
     744:	8e e4       	ldi	r24, 0x4E	; 78
     746:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
     74a:	11 c0       	rjmp	.+34     	; 0x76e <usual_direction_to_compass_direction+0xa2>
		}
		else if (usual_action == 'R')
     74c:	82 35       	cpi	r24, 0x52	; 82
     74e:	21 f4       	brne	.+8      	; 0x758 <usual_direction_to_compass_direction+0x8c>
		{
			comp_action = 'S';
     750:	83 e5       	ldi	r24, 0x53	; 83
     752:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
     756:	0b c0       	rjmp	.+22     	; 0x76e <usual_direction_to_compass_direction+0xa2>
		}
		else if (usual_action == 'F')
     758:	86 34       	cpi	r24, 0x46	; 70
     75a:	21 f4       	brne	.+8      	; 0x764 <usual_direction_to_compass_direction+0x98>
		{
			comp_action = 'E';
     75c:	85 e4       	ldi	r24, 0x45	; 69
     75e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
     762:	05 c0       	rjmp	.+10     	; 0x76e <usual_direction_to_compass_direction+0xa2>
		}
		else if (usual_action == 'B')
     764:	82 34       	cpi	r24, 0x42	; 66
     766:	19 f4       	brne	.+6      	; 0x76e <usual_direction_to_compass_direction+0xa2>
		{
			comp_action = 'W';
     768:	87 e5       	ldi	r24, 0x57	; 87
     76a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
		}
	}
	//new_north = north_updater(usual_action , north);
}
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <current_state_update>:
}


void current_state_update(uint8_t action )
{
	if(action == 'N')
     772:	8e 34       	cpi	r24, 0x4E	; 78
     774:	31 f4       	brne	.+12     	; 0x782 <current_state_update+0x10>
	{
		current_state[0]++;
     776:	e1 e7       	ldi	r30, 0x71	; 113
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret
	}
	else if(action == 'S')
     782:	83 35       	cpi	r24, 0x53	; 83
     784:	31 f4       	brne	.+12     	; 0x792 <current_state_update+0x20>
	{
		current_state[0]--;
     786:	e1 e7       	ldi	r30, 0x71	; 113
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	81 50       	subi	r24, 0x01	; 1
     78e:	80 83       	st	Z, r24
     790:	08 95       	ret
	}
	else if(action == 'E')
     792:	85 34       	cpi	r24, 0x45	; 69
     794:	31 f4       	brne	.+12     	; 0x7a2 <current_state_update+0x30>
	{
		current_state[1]++;
     796:	e1 e7       	ldi	r30, 0x71	; 113
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	81 81       	ldd	r24, Z+1	; 0x01
     79c:	8f 5f       	subi	r24, 0xFF	; 255
     79e:	81 83       	std	Z+1, r24	; 0x01
     7a0:	08 95       	ret
	}
	else if(action == 'W')
     7a2:	87 35       	cpi	r24, 0x57	; 87
     7a4:	29 f4       	brne	.+10     	; 0x7b0 <current_state_update+0x3e>
	{
		current_state[1]--;
     7a6:	e1 e7       	ldi	r30, 0x71	; 113
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	81 81       	ldd	r24, Z+1	; 0x01
     7ac:	81 50       	subi	r24, 0x01	; 1
     7ae:	81 83       	std	Z+1, r24	; 0x01
     7b0:	08 95       	ret

000007b2 <get_index>:
	}
	
}
uint8_t get_index(int8_t in)
{
	if(in > 0)
     7b2:	18 16       	cp	r1, r24
     7b4:	2c f0       	brlt	.+10     	; 0x7c0 <get_index+0xe>
	{
		return in ;
	}
	else if(in < 0)
     7b6:	88 23       	and	r24, r24
     7b8:	14 f4       	brge	.+4      	; 0x7be <get_index+0xc>
	{
		return in+5 ;
     7ba:	8b 5f       	subi	r24, 0xFB	; 251
     7bc:	08 95       	ret
	}
    return 0;	
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret

000007c2 <take_action>:
		current_state[1]--;
	}			
}

void take_action (void)
{
     7c2:	5f 92       	push	r5
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <take_action+0x20>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <take_action+0x22>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t dimensions[4] = {0} , count  = 0 , get_twice = 0 ;             //{'E','W','N','S'};
     7e8:	19 82       	std	Y+1, r1	; 0x01
     7ea:	1a 82       	std	Y+2, r1	; 0x02
     7ec:	1b 82       	std	Y+3, r1	; 0x03
     7ee:	1c 82       	std	Y+4, r1	; 0x04
    if(maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] == 0)
     7f0:	0f 2e       	mov	r0, r31
     7f2:	f1 e7       	ldi	r31, 0x71	; 113
     7f4:	ef 2e       	mov	r14, r31
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	ff 2e       	mov	r15, r31
     7fa:	f0 2d       	mov	r31, r0
     7fc:	d7 01       	movw	r26, r14
     7fe:	8c 91       	ld	r24, X
     800:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     804:	18 2f       	mov	r17, r24
     806:	f7 01       	movw	r30, r14
     808:	81 81       	ldd	r24, Z+1	; 0x01
     80a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     80e:	21 2f       	mov	r18, r17
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	a9 01       	movw	r20, r18
     814:	44 0f       	add	r20, r20
     816:	55 1f       	adc	r21, r21
     818:	44 0f       	add	r20, r20
     81a:	55 1f       	adc	r21, r21
     81c:	24 0f       	add	r18, r20
     81e:	35 1f       	adc	r19, r21
     820:	29 55       	subi	r18, 0x59	; 89
     822:	3f 4f       	sbci	r19, 0xFF	; 255
     824:	f9 01       	movw	r30, r18
     826:	e8 0f       	add	r30, r24
     828:	f1 1d       	adc	r31, r1
     82a:	80 81       	ld	r24, Z
     82c:	81 11       	cpse	r24, r1
     82e:	9a c2       	rjmp	.+1332   	; 0xd64 <__stack+0x505>
	{
		get_status();
     830:	0e 94 22 02 	call	0x444	; 0x444 <get_status>
		for (uint8_t i = 0 ; i < 3  ; i++)
     834:	10 e0       	ldi	r17, 0x00	; 0
	}			
}

void take_action (void)
{
	uint8_t dimensions[4] = {0} , count  = 0 , get_twice = 0 ;             //{'E','W','N','S'};
     836:	71 2c       	mov	r7, r1
     838:	00 e0       	ldi	r16, 0x00	; 0
    if(maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] == 0)
	{
		get_status();
		for (uint8_t i = 0 ; i < 3  ; i++)
     83a:	1f c2       	rjmp	.+1086   	; 0xc7a <__stack+0x41b>
		{
			if(state[i] !=0)
     83c:	e1 2f       	mov	r30, r17
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	e2 59       	subi	r30, 0x92	; 146
     842:	ff 4f       	sbci	r31, 0xFF	; 255
     844:	80 81       	ld	r24, Z
     846:	88 23       	and	r24, r24
     848:	09 f4       	brne	.+2      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84a:	16 c2       	rjmp	.+1068   	; 0xc78 <__stack+0x419>
			{
				usual_direction_to_compass_direction(state[i],new_north);
     84c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <new_north>
     850:	0e 94 66 03 	call	0x6cc	; 0x6cc <usual_direction_to_compass_direction>
			
				if(comp_action == 'N')
     854:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <comp_action>
     858:	8e 34       	cpi	r24, 0x4E	; 78
     85a:	09 f0       	breq	.+2      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85c:	7f c0       	rjmp	.+254    	; 0x95c <__stack+0xfd>
				{
						if(maze_visited_status[get_index(1+current_state[0])][get_index(current_state[1])] == 0)
     85e:	0f 2e       	mov	r0, r31
     860:	f1 e7       	ldi	r31, 0x71	; 113
     862:	ef 2e       	mov	r14, r31
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	ff 2e       	mov	r15, r31
     868:	f0 2d       	mov	r31, r0
     86a:	d7 01       	movw	r26, r14
     86c:	9c 90       	ld	r9, X
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	89 0d       	add	r24, r9
     872:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     876:	d8 2e       	mov	r13, r24
     878:	f7 01       	movw	r30, r14
     87a:	81 81       	ldd	r24, Z+1	; 0x01
     87c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     880:	e8 2e       	mov	r14, r24
     882:	f1 2c       	mov	r15, r1
     884:	8d 2d       	mov	r24, r13
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	e8 0f       	add	r30, r24
     894:	f9 1f       	adc	r31, r25
     896:	e9 55       	subi	r30, 0x59	; 89
     898:	ff 4f       	sbci	r31, 0xFF	; 255
     89a:	ee 0d       	add	r30, r14
     89c:	ff 1d       	adc	r31, r15
     89e:	80 81       	ld	r24, Z
     8a0:	81 11       	cpse	r24, r1
     8a2:	0a c0       	rjmp	.+20     	; 0x8b8 <__stack+0x59>
							dimensions[count++] = 'N';      
     8a4:	e1 e0       	ldi	r30, 0x01	; 1
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	ec 0f       	add	r30, r28
     8aa:	fd 1f       	adc	r31, r29
     8ac:	e0 0f       	add	r30, r16
     8ae:	f1 1d       	adc	r31, r1
     8b0:	8e e4       	ldi	r24, 0x4E	; 78
     8b2:	80 83       	st	Z, r24
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	e0 c1       	rjmp	.+960    	; 0xc78 <__stack+0x419>
						else if(maze_visited_status[get_index(1+current_state[0])][get_index(current_state[1])] != 0)
     8b8:	88 23       	and	r24, r24
     8ba:	09 f4       	brne	.+2      	; 0x8be <__stack+0x5f>
     8bc:	dd c1       	rjmp	.+954    	; 0xc78 <__stack+0x419>
						{
							if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 1)
     8be:	80 90 74 00 	lds	r8, 0x0074	; 0x800074 <track_counter>
     8c2:	a8 2c       	mov	r10, r8
     8c4:	b1 2c       	mov	r11, r1
     8c6:	c5 01       	movw	r24, r10
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	9c 01       	movw	r18, r24
     8ce:	2b 58       	subi	r18, 0x8B	; 139
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	69 01       	movw	r12, r18
     8d4:	d9 01       	movw	r26, r18
     8d6:	8c 91       	ld	r24, X
     8d8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     8dc:	68 2e       	mov	r6, r24
     8de:	f6 01       	movw	r30, r12
     8e0:	81 81       	ldd	r24, Z+1	; 0x01
     8e2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     8e6:	26 2d       	mov	r18, r6
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	a9 01       	movw	r20, r18
     8ec:	44 0f       	add	r20, r20
     8ee:	55 1f       	adc	r21, r21
     8f0:	44 0f       	add	r20, r20
     8f2:	55 1f       	adc	r21, r21
     8f4:	24 0f       	add	r18, r20
     8f6:	35 1f       	adc	r19, r21
     8f8:	29 55       	subi	r18, 0x59	; 89
     8fa:	3f 4f       	sbci	r19, 0xFF	; 255
     8fc:	f9 01       	movw	r30, r18
     8fe:	e8 0f       	add	r30, r24
     900:	f1 1d       	adc	r31, r1
     902:	80 81       	ld	r24, Z
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	31 f5       	brne	.+76     	; 0x954 <__stack+0xf5>
							{
								maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] = 2 ;
     908:	89 2d       	mov	r24, r9
     90a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     90e:	f5 e0       	ldi	r31, 0x05	; 5
     910:	8f 9f       	mul	r24, r31
     912:	c0 01       	movw	r24, r0
     914:	11 24       	eor	r1, r1
     916:	fc 01       	movw	r30, r24
     918:	e9 55       	subi	r30, 0x59	; 89
     91a:	ff 4f       	sbci	r31, 0xFF	; 255
     91c:	ee 0d       	add	r30, r14
     91e:	ff 1d       	adc	r31, r15
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	80 83       	st	Z, r24
								track_memory[track_counter][0]=0;
     924:	f6 01       	movw	r30, r12
     926:	10 82       	st	Z, r1
								track_memory[track_counter][1]=0;
     928:	11 82       	std	Z+1, r1	; 0x01
								track_counter--;
     92a:	ef ef       	ldi	r30, 0xFF	; 255
     92c:	e8 0d       	add	r30, r8
     92e:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <track_counter>
								current_state[0] = track_memory[track_counter][0]; 
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
     938:	eb 58       	subi	r30, 0x8B	; 139
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	80 81       	ld	r24, Z
     93e:	a1 e7       	ldi	r26, 0x71	; 113
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	8c 93       	st	X, r24
								current_state[1] = track_memory[track_counter][1]; 
     944:	81 81       	ldd	r24, Z+1	; 0x01
     946:	11 96       	adiw	r26, 0x01	; 1
     948:	8c 93       	st	X, r24
								dimensions[0] = 0;
     94a:	19 82       	std	Y+1, r1	; 0x01
								dimensions[1] = 0;
     94c:	1a 82       	std	Y+2, r1	; 0x02
								dimensions[2] = 0;
     94e:	1b 82       	std	Y+3, r1	; 0x03
								count = 0 ;
     950:	00 e0       	ldi	r16, 0x00	; 0
								// go to the previous cell 
								break;
     952:	96 c1       	rjmp	.+812    	; 0xc80 <__stack+0x421>
							}
							else if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 2)
     954:	82 30       	cpi	r24, 0x02	; 2
     956:	09 f0       	breq	.+2      	; 0x95a <__stack+0xfb>
     958:	8f c1       	rjmp	.+798    	; 0xc78 <__stack+0x419>
     95a:	83 c1       	rjmp	.+774    	; 0xc62 <__stack+0x403>
								get_twice= 1;
							}
						}							  
				}
			
				else if(comp_action == 'E')
     95c:	85 34       	cpi	r24, 0x45	; 69
     95e:	09 f0       	breq	.+2      	; 0x962 <__stack+0x103>
     960:	7f c0       	rjmp	.+254    	; 0xa60 <__stack+0x201>
				{
					if(maze_visited_status[get_index(current_state[0])][get_index(1+current_state[1])] == 0)
     962:	0f 2e       	mov	r0, r31
     964:	f1 e7       	ldi	r31, 0x71	; 113
     966:	cf 2e       	mov	r12, r31
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	df 2e       	mov	r13, r31
     96c:	f0 2d       	mov	r31, r0
     96e:	d6 01       	movw	r26, r12
     970:	8c 91       	ld	r24, X
     972:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     976:	e8 2e       	mov	r14, r24
     978:	f1 2c       	mov	r15, r1
     97a:	f6 01       	movw	r30, r12
     97c:	91 80       	ldd	r9, Z+1	; 0x01
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	89 0d       	add	r24, r9
     982:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     986:	97 01       	movw	r18, r14
     988:	22 0f       	add	r18, r18
     98a:	33 1f       	adc	r19, r19
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	2e 0d       	add	r18, r14
     992:	3f 1d       	adc	r19, r15
     994:	29 55       	subi	r18, 0x59	; 89
     996:	3f 4f       	sbci	r19, 0xFF	; 255
     998:	f9 01       	movw	r30, r18
     99a:	e8 0f       	add	r30, r24
     99c:	f1 1d       	adc	r31, r1
     99e:	80 81       	ld	r24, Z
     9a0:	81 11       	cpse	r24, r1
     9a2:	0a c0       	rjmp	.+20     	; 0x9b8 <__stack+0x159>
						dimensions[count++] = 'E';
     9a4:	e1 e0       	ldi	r30, 0x01	; 1
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	ec 0f       	add	r30, r28
     9aa:	fd 1f       	adc	r31, r29
     9ac:	e0 0f       	add	r30, r16
     9ae:	f1 1d       	adc	r31, r1
     9b0:	85 e4       	ldi	r24, 0x45	; 69
     9b2:	80 83       	st	Z, r24
     9b4:	0f 5f       	subi	r16, 0xFF	; 255
     9b6:	60 c1       	rjmp	.+704    	; 0xc78 <__stack+0x419>

					else if(maze_visited_status[get_index(current_state[0])][get_index(1+current_state[1])] != 0)
     9b8:	88 23       	and	r24, r24
     9ba:	09 f4       	brne	.+2      	; 0x9be <__stack+0x15f>
     9bc:	5d c1       	rjmp	.+698    	; 0xc78 <__stack+0x419>
					{
						if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 1)
     9be:	80 90 74 00 	lds	r8, 0x0074	; 0x800074 <track_counter>
     9c2:	a8 2c       	mov	r10, r8
     9c4:	b1 2c       	mov	r11, r1
     9c6:	c5 01       	movw	r24, r10
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	9c 01       	movw	r18, r24
     9ce:	2b 58       	subi	r18, 0x8B	; 139
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	69 01       	movw	r12, r18
     9d4:	d9 01       	movw	r26, r18
     9d6:	8c 91       	ld	r24, X
     9d8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     9dc:	68 2e       	mov	r6, r24
     9de:	f6 01       	movw	r30, r12
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
     9e2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     9e6:	26 2d       	mov	r18, r6
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	a9 01       	movw	r20, r18
     9ec:	44 0f       	add	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	44 0f       	add	r20, r20
     9f2:	55 1f       	adc	r21, r21
     9f4:	24 0f       	add	r18, r20
     9f6:	35 1f       	adc	r19, r21
     9f8:	29 55       	subi	r18, 0x59	; 89
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	f9 01       	movw	r30, r18
     9fe:	e8 0f       	add	r30, r24
     a00:	f1 1d       	adc	r31, r1
     a02:	80 81       	ld	r24, Z
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	41 f5       	brne	.+80     	; 0xa58 <__stack+0x1f9>
						{
							maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] = 2 ;
     a08:	89 2d       	mov	r24, r9
     a0a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     a0e:	95 e0       	ldi	r25, 0x05	; 5
     a10:	9e 9d       	mul	r25, r14
     a12:	90 01       	movw	r18, r0
     a14:	9f 9d       	mul	r25, r15
     a16:	30 0d       	add	r19, r0
     a18:	11 24       	eor	r1, r1
     a1a:	29 55       	subi	r18, 0x59	; 89
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	f9 01       	movw	r30, r18
     a20:	e8 0f       	add	r30, r24
     a22:	f1 1d       	adc	r31, r1
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	80 83       	st	Z, r24
							track_memory[track_counter][0]=0;
     a28:	f6 01       	movw	r30, r12
     a2a:	10 82       	st	Z, r1
							track_memory[track_counter][1]=0;
     a2c:	11 82       	std	Z+1, r1	; 0x01
							track_counter--;
     a2e:	ef ef       	ldi	r30, 0xFF	; 255
     a30:	e8 0d       	add	r30, r8
     a32:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <track_counter>
							current_state[0] = track_memory[track_counter][0];
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	eb 58       	subi	r30, 0x8B	; 139
     a3e:	ff 4f       	sbci	r31, 0xFF	; 255
     a40:	80 81       	ld	r24, Z
     a42:	a1 e7       	ldi	r26, 0x71	; 113
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	8c 93       	st	X, r24
							current_state[1] = track_memory[track_counter][1];
     a48:	81 81       	ldd	r24, Z+1	; 0x01
     a4a:	11 96       	adiw	r26, 0x01	; 1
     a4c:	8c 93       	st	X, r24
							dimensions[0] = 0;
     a4e:	19 82       	std	Y+1, r1	; 0x01
							dimensions[1] = 0;
     a50:	1a 82       	std	Y+2, r1	; 0x02
							dimensions[2] = 0;
     a52:	1b 82       	std	Y+3, r1	; 0x03
							count = 0 ;
     a54:	00 e0       	ldi	r16, 0x00	; 0
							// go to the previous cell
							break;
     a56:	14 c1       	rjmp	.+552    	; 0xc80 <__stack+0x421>
						}
						else if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 2)
     a58:	82 30       	cpi	r24, 0x02	; 2
     a5a:	09 f0       	breq	.+2      	; 0xa5e <__stack+0x1ff>
     a5c:	0d c1       	rjmp	.+538    	; 0xc78 <__stack+0x419>
     a5e:	04 c1       	rjmp	.+520    	; 0xc68 <__stack+0x409>
							get_twice= 1;
						}
					}
			
				}
				else if(comp_action == 'W')
     a60:	87 35       	cpi	r24, 0x57	; 87
     a62:	09 f0       	breq	.+2      	; 0xa66 <__stack+0x207>
     a64:	7e c0       	rjmp	.+252    	; 0xb62 <__stack+0x303>
				{
					if(maze_visited_status[get_index(current_state[0])][get_index(current_state[1])-1] == 0)
     a66:	0f 2e       	mov	r0, r31
     a68:	f1 e7       	ldi	r31, 0x71	; 113
     a6a:	cf 2e       	mov	r12, r31
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	df 2e       	mov	r13, r31
     a70:	f0 2d       	mov	r31, r0
     a72:	d6 01       	movw	r26, r12
     a74:	8c 91       	ld	r24, X
     a76:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     a7a:	e8 2e       	mov	r14, r24
     a7c:	f1 2c       	mov	r15, r1
     a7e:	f6 01       	movw	r30, r12
     a80:	81 81       	ldd	r24, Z+1	; 0x01
     a82:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     a86:	c8 2e       	mov	r12, r24
     a88:	d1 2c       	mov	r13, r1
     a8a:	96 01       	movw	r18, r12
     a8c:	21 50       	subi	r18, 0x01	; 1
     a8e:	31 09       	sbc	r19, r1
     a90:	c7 01       	movw	r24, r14
     a92:	88 0f       	add	r24, r24
     a94:	99 1f       	adc	r25, r25
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	8e 0d       	add	r24, r14
     a9c:	9f 1d       	adc	r25, r15
     a9e:	89 55       	subi	r24, 0x59	; 89
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	fc 01       	movw	r30, r24
     aa4:	e2 0f       	add	r30, r18
     aa6:	f3 1f       	adc	r31, r19
     aa8:	80 81       	ld	r24, Z
     aaa:	81 11       	cpse	r24, r1
     aac:	0a c0       	rjmp	.+20     	; 0xac2 <__stack+0x263>
						dimensions[count++] = 'W';
     aae:	e1 e0       	ldi	r30, 0x01	; 1
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	ec 0f       	add	r30, r28
     ab4:	fd 1f       	adc	r31, r29
     ab6:	e0 0f       	add	r30, r16
     ab8:	f1 1d       	adc	r31, r1
     aba:	87 e5       	ldi	r24, 0x57	; 87
     abc:	80 83       	st	Z, r24
     abe:	0f 5f       	subi	r16, 0xFF	; 255
     ac0:	db c0       	rjmp	.+438    	; 0xc78 <__stack+0x419>

					else if(maze_visited_status[get_index(current_state[0])][get_index(current_state[1])-1] != 0)
     ac2:	88 23       	and	r24, r24
     ac4:	09 f4       	brne	.+2      	; 0xac8 <__stack+0x269>
     ac6:	d8 c0       	rjmp	.+432    	; 0xc78 <__stack+0x419>
					{
						if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 1)
     ac8:	60 90 74 00 	lds	r6, 0x0074	; 0x800074 <track_counter>
     acc:	86 2c       	mov	r8, r6
     ace:	91 2c       	mov	r9, r1
     ad0:	c4 01       	movw	r24, r8
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	9c 01       	movw	r18, r24
     ad8:	2b 58       	subi	r18, 0x8B	; 139
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	59 01       	movw	r10, r18
     ade:	d9 01       	movw	r26, r18
     ae0:	8c 91       	ld	r24, X
     ae2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     ae6:	58 2e       	mov	r5, r24
     ae8:	f5 01       	movw	r30, r10
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     af0:	25 2d       	mov	r18, r5
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	a9 01       	movw	r20, r18
     af6:	44 0f       	add	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	44 0f       	add	r20, r20
     afc:	55 1f       	adc	r21, r21
     afe:	24 0f       	add	r18, r20
     b00:	35 1f       	adc	r19, r21
     b02:	29 55       	subi	r18, 0x59	; 89
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	f9 01       	movw	r30, r18
     b08:	e8 0f       	add	r30, r24
     b0a:	f1 1d       	adc	r31, r1
     b0c:	80 81       	ld	r24, Z
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	21 f5       	brne	.+72     	; 0xb5a <__stack+0x2fb>
						{
							maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] = 2 ;
     b12:	85 e0       	ldi	r24, 0x05	; 5
     b14:	8e 9d       	mul	r24, r14
     b16:	f0 01       	movw	r30, r0
     b18:	8f 9d       	mul	r24, r15
     b1a:	f0 0d       	add	r31, r0
     b1c:	11 24       	eor	r1, r1
     b1e:	e9 55       	subi	r30, 0x59	; 89
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	ec 0d       	add	r30, r12
     b24:	fd 1d       	adc	r31, r13
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	80 83       	st	Z, r24
							track_memory[track_counter][0]=0;
     b2a:	f5 01       	movw	r30, r10
     b2c:	10 82       	st	Z, r1
							track_memory[track_counter][1]=0;
     b2e:	11 82       	std	Z+1, r1	; 0x01
							track_counter--;
     b30:	ef ef       	ldi	r30, 0xFF	; 255
     b32:	e6 0d       	add	r30, r6
     b34:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <track_counter>
							current_state[0] = track_memory[track_counter][0];
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	ee 0f       	add	r30, r30
     b3c:	ff 1f       	adc	r31, r31
     b3e:	eb 58       	subi	r30, 0x8B	; 139
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	80 81       	ld	r24, Z
     b44:	a1 e7       	ldi	r26, 0x71	; 113
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	8c 93       	st	X, r24
							current_state[1] = track_memory[track_counter][1];
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	8c 93       	st	X, r24
							dimensions[0] = 0;
     b50:	19 82       	std	Y+1, r1	; 0x01
							dimensions[1] = 0;
     b52:	1a 82       	std	Y+2, r1	; 0x02
							dimensions[2] = 0;
     b54:	1b 82       	std	Y+3, r1	; 0x03
							count = 0 ;
     b56:	00 e0       	ldi	r16, 0x00	; 0
							// go to the previous cell
							break;
     b58:	93 c0       	rjmp	.+294    	; 0xc80 <__stack+0x421>
						}
						else if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 2)
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	09 f0       	breq	.+2      	; 0xb60 <__stack+0x301>
     b5e:	8c c0       	rjmp	.+280    	; 0xc78 <__stack+0x419>
     b60:	86 c0       	rjmp	.+268    	; 0xc6e <__stack+0x40f>
						}
				  
					}
			   
				}
				else if(comp_action == 'S')
     b62:	83 35       	cpi	r24, 0x53	; 83
     b64:	09 f0       	breq	.+2      	; 0xb68 <__stack+0x309>
     b66:	88 c0       	rjmp	.+272    	; 0xc78 <__stack+0x419>
				{
					if(maze_visited_status[get_index(current_state[0])-1][get_index(current_state[1])] == 0)
     b68:	0f 2e       	mov	r0, r31
     b6a:	f1 e7       	ldi	r31, 0x71	; 113
     b6c:	ef 2e       	mov	r14, r31
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ff 2e       	mov	r15, r31
     b72:	f0 2d       	mov	r31, r0
     b74:	d7 01       	movw	r26, r14
     b76:	8c 91       	ld	r24, X
     b78:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     b7c:	c8 2e       	mov	r12, r24
     b7e:	d1 2c       	mov	r13, r1
     b80:	56 01       	movw	r10, r12
     b82:	b1 e0       	ldi	r27, 0x01	; 1
     b84:	ab 1a       	sub	r10, r27
     b86:	b1 08       	sbc	r11, r1
     b88:	f7 01       	movw	r30, r14
     b8a:	81 81       	ldd	r24, Z+1	; 0x01
     b8c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     b90:	e8 2e       	mov	r14, r24
     b92:	f1 2c       	mov	r15, r1
     b94:	f5 01       	movw	r30, r10
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	ea 0d       	add	r30, r10
     ba0:	fb 1d       	adc	r31, r11
     ba2:	e9 55       	subi	r30, 0x59	; 89
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	ee 0d       	add	r30, r14
     ba8:	ff 1d       	adc	r31, r15
     baa:	80 81       	ld	r24, Z
     bac:	81 11       	cpse	r24, r1
     bae:	0a c0       	rjmp	.+20     	; 0xbc4 <__stack+0x365>
					dimensions[count++] = 'S';
     bb0:	e1 e0       	ldi	r30, 0x01	; 1
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ec 0f       	add	r30, r28
     bb6:	fd 1f       	adc	r31, r29
     bb8:	e0 0f       	add	r30, r16
     bba:	f1 1d       	adc	r31, r1
     bbc:	83 e5       	ldi	r24, 0x53	; 83
     bbe:	80 83       	st	Z, r24
     bc0:	0f 5f       	subi	r16, 0xFF	; 255
     bc2:	5a c0       	rjmp	.+180    	; 0xc78 <__stack+0x419>
					else if(maze_visited_status[get_index(current_state[0])-1][get_index(current_state[1])] != 0)
     bc4:	88 23       	and	r24, r24
     bc6:	09 f4       	brne	.+2      	; 0xbca <__stack+0x36b>
     bc8:	57 c0       	rjmp	.+174    	; 0xc78 <__stack+0x419>
					{
						if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 1)
     bca:	60 90 74 00 	lds	r6, 0x0074	; 0x800074 <track_counter>
     bce:	86 2c       	mov	r8, r6
     bd0:	91 2c       	mov	r9, r1
     bd2:	c4 01       	movw	r24, r8
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	9c 01       	movw	r18, r24
     bda:	2b 58       	subi	r18, 0x8B	; 139
     bdc:	3f 4f       	sbci	r19, 0xFF	; 255
     bde:	59 01       	movw	r10, r18
     be0:	d9 01       	movw	r26, r18
     be2:	8c 91       	ld	r24, X
     be4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     be8:	58 2e       	mov	r5, r24
     bea:	f5 01       	movw	r30, r10
     bec:	81 81       	ldd	r24, Z+1	; 0x01
     bee:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     bf2:	25 2d       	mov	r18, r5
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	a9 01       	movw	r20, r18
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	44 0f       	add	r20, r20
     bfe:	55 1f       	adc	r21, r21
     c00:	24 0f       	add	r18, r20
     c02:	35 1f       	adc	r19, r21
     c04:	29 55       	subi	r18, 0x59	; 89
     c06:	3f 4f       	sbci	r19, 0xFF	; 255
     c08:	f9 01       	movw	r30, r18
     c0a:	e8 0f       	add	r30, r24
     c0c:	f1 1d       	adc	r31, r1
     c0e:	80 81       	ld	r24, Z
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	21 f5       	brne	.+72     	; 0xc5c <__stack+0x3fd>
						{
							maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] = 2 ;
     c14:	85 e0       	ldi	r24, 0x05	; 5
     c16:	8c 9d       	mul	r24, r12
     c18:	f0 01       	movw	r30, r0
     c1a:	8d 9d       	mul	r24, r13
     c1c:	f0 0d       	add	r31, r0
     c1e:	11 24       	eor	r1, r1
     c20:	e9 55       	subi	r30, 0x59	; 89
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	ee 0d       	add	r30, r14
     c26:	ff 1d       	adc	r31, r15
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	80 83       	st	Z, r24
							track_memory[track_counter][0]=0;
     c2c:	f5 01       	movw	r30, r10
     c2e:	10 82       	st	Z, r1
							track_memory[track_counter][1]=0;
     c30:	11 82       	std	Z+1, r1	; 0x01
							track_counter--;
     c32:	ef ef       	ldi	r30, 0xFF	; 255
     c34:	e6 0d       	add	r30, r6
     c36:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <track_counter>
							current_state[0] = track_memory[track_counter][0];
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	eb 58       	subi	r30, 0x8B	; 139
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	80 81       	ld	r24, Z
     c46:	a1 e7       	ldi	r26, 0x71	; 113
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	8c 93       	st	X, r24
							current_state[1] = track_memory[track_counter][1];
     c4c:	81 81       	ldd	r24, Z+1	; 0x01
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	8c 93       	st	X, r24
							dimensions[0] = 0;
     c52:	19 82       	std	Y+1, r1	; 0x01
							dimensions[1] = 0;
     c54:	1a 82       	std	Y+2, r1	; 0x02
							dimensions[2] = 0;
     c56:	1b 82       	std	Y+3, r1	; 0x03
							count = 0 ;
     c58:	00 e0       	ldi	r16, 0x00	; 0
							// go to the previous cell
							break;
     c5a:	12 c0       	rjmp	.+36     	; 0xc80 <__stack+0x421>
						}
						else if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 2)
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	61 f4       	brne	.+24     	; 0xc78 <__stack+0x419>
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <__stack+0x415>
								// go to the previous cell 
								break;
							}
							else if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 2)
							{
								get_twice= 1;
     c62:	77 24       	eor	r7, r7
     c64:	73 94       	inc	r7
     c66:	08 c0       	rjmp	.+16     	; 0xc78 <__stack+0x419>
							// go to the previous cell
							break;
						}
						else if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 2)
						{
							get_twice= 1;
     c68:	77 24       	eor	r7, r7
     c6a:	73 94       	inc	r7
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__stack+0x419>
							// go to the previous cell
							break;
						}
						else if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 2)
						{
							get_twice= 1;
     c6e:	77 24       	eor	r7, r7
     c70:	73 94       	inc	r7
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <__stack+0x419>
							// go to the previous cell
							break;
						}
						else if(maze_visited_status[get_index(track_memory[track_counter][0])][get_index(track_memory[track_counter][1])] == 2)
						{
							get_twice= 1;
     c74:	77 24       	eor	r7, r7
     c76:	73 94       	inc	r7
{
	uint8_t dimensions[4] = {0} , count  = 0 , get_twice = 0 ;             //{'E','W','N','S'};
    if(maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] == 0)
	{
		get_status();
		for (uint8_t i = 0 ; i < 3  ; i++)
     c78:	1f 5f       	subi	r17, 0xFF	; 255
     c7a:	13 30       	cpi	r17, 0x03	; 3
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <__stack+0x421>
     c7e:	de cd       	rjmp	.-1092   	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
			   
				}
			}
		
		}
        if(Ultrasonic_Read(Front) > 50 )
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	48 e4       	ldi	r20, 0x48	; 72
     c8c:	52 e4       	ldi	r21, 0x42	; 66
     c8e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     c92:	18 16       	cp	r1, r24
     c94:	24 f4       	brge	.+8      	; 0xc9e <__stack+0x43f>
         {
			 End_of_maze = 1 ;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <End_of_maze>
     c9c:	dd c1       	rjmp	.+954    	; 0x1058 <__stack+0x7f9>
	         // go front 
         }
		else if(Ultrasonic_Read(Right) > 50)
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	48 e4       	ldi	r20, 0x48	; 72
     caa:	52 e4       	ldi	r21, 0x42	; 66
     cac:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     cb0:	18 16       	cp	r1, r24
     cb2:	24 f4       	brge	.+8      	; 0xcbc <__stack+0x45d>
		{
			End_of_maze = 1 ;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <End_of_maze>
     cba:	ce c1       	rjmp	.+924    	; 0x1058 <__stack+0x7f9>
			// go right
		} 
		else if (Ultrasonic_Read(Left) > 50)
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	48 e4       	ldi	r20, 0x48	; 72
     cc8:	52 e4       	ldi	r21, 0x42	; 66
     cca:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     cce:	18 16       	cp	r1, r24
     cd0:	24 f4       	brge	.+8      	; 0xcda <__stack+0x47b>
		{
			End_of_maze = 1 ;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <End_of_maze>
     cd8:	bf c1       	rjmp	.+894    	; 0x1058 <__stack+0x7f9>
             // go left 
		}		
		else if(get_twice || dimensions[0] != 0 )
     cda:	71 10       	cpse	r7, r1
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <__stack+0x487>
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	88 23       	and	r24, r24
     ce2:	09 f4       	brne	.+2      	; 0xce6 <__stack+0x487>
     ce4:	b9 c1       	rjmp	.+882    	; 0x1058 <__stack+0x7f9>
		{
			comp_action =   dimensions[get_random_action(count)];
     ce6:	80 2f       	mov	r24, r16
     ce8:	0e 94 56 02 	call	0x4ac	; 0x4ac <get_random_action>
     cec:	e1 e0       	ldi	r30, 0x01	; 1
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	ec 0f       	add	r30, r28
     cf2:	fd 1f       	adc	r31, r29
     cf4:	e8 0f       	add	r30, r24
     cf6:	f1 1d       	adc	r31, r1
     cf8:	80 81       	ld	r24, Z
     cfa:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
			compass_direction_to_usual_direction(comp_action,new_north);
     cfe:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <new_north>
     d02:	0e 94 03 03 	call	0x606	; 0x606 <compass_direction_to_usual_direction>
			maze_visited_status[get_index(current_state[0])][get_index(current_state[1])]=1;
     d06:	01 e7       	ldi	r16, 0x71	; 113
     d08:	10 e0       	ldi	r17, 0x00	; 0
     d0a:	d8 01       	movw	r26, r16
     d0c:	8c 91       	ld	r24, X
     d0e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     d12:	e8 2e       	mov	r14, r24
     d14:	f1 2c       	mov	r15, r1
     d16:	f8 01       	movw	r30, r16
     d18:	81 81       	ldd	r24, Z+1	; 0x01
     d1a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     d1e:	97 01       	movw	r18, r14
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	2e 0d       	add	r18, r14
     d2a:	3f 1d       	adc	r19, r15
     d2c:	29 55       	subi	r18, 0x59	; 89
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	f9 01       	movw	r30, r18
     d32:	e8 0f       	add	r30, r24
     d34:	f1 1d       	adc	r31, r1
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 83       	st	Z, r24
			// move to uaual action 
			current_state_update(comp_action);
     d3a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <comp_action>
     d3e:	0e 94 b9 03 	call	0x772	; 0x772 <current_state_update>
			track_counter++;
     d42:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <track_counter>
     d46:	ef 5f       	subi	r30, 0xFF	; 255
     d48:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <track_counter>
			track_memory[track_counter][0] = current_state[0];
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	d8 01       	movw	r26, r16
     d50:	8c 91       	ld	r24, X
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	eb 58       	subi	r30, 0x8B	; 139
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 83       	st	Z, r24
			track_memory[track_counter][1] = current_state[1];
     d5c:	11 96       	adiw	r26, 0x01	; 1
     d5e:	8c 91       	ld	r24, X
     d60:	81 83       	std	Z+1, r24	; 0x01
     d62:	7a c1       	rjmp	.+756    	; 0x1058 <__stack+0x7f9>
			
		}		
			
	}
	else if (maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] == 1)
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	09 f0       	breq	.+2      	; 0xd6a <__stack+0x50b>
     d68:	77 c1       	rjmp	.+750    	; 0x1058 <__stack+0x7f9>
	{
		get_status();
     d6a:	0e 94 22 02 	call	0x444	; 0x444 <get_status>
		for (uint8_t i = 0 ; i < 3  ; i++)
     d6e:	10 e0       	ldi	r17, 0x00	; 0
	}			
}

void take_action (void)
{
	uint8_t dimensions[4] = {0} , count  = 0 , get_twice = 0 ;             //{'E','W','N','S'};
     d70:	00 e0       	ldi	r16, 0x00	; 0
			
	}
	else if (maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] == 1)
	{
		get_status();
		for (uint8_t i = 0 ; i < 3  ; i++)
     d72:	ca c0       	rjmp	.+404    	; 0xf08 <__stack+0x6a9>
		{
			if(state[i] !=0)
     d74:	e1 2f       	mov	r30, r17
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	e2 59       	subi	r30, 0x92	; 146
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	88 23       	and	r24, r24
     d80:	09 f4       	brne	.+2      	; 0xd84 <__stack+0x525>
     d82:	c1 c0       	rjmp	.+386    	; 0xf06 <__stack+0x6a7>
			{
				usual_direction_to_compass_direction(state[i],new_north);
     d84:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <new_north>
     d88:	0e 94 66 03 	call	0x6cc	; 0x6cc <usual_direction_to_compass_direction>
				if(comp_action == 'N')
     d8c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <comp_action>
     d90:	8e 34       	cpi	r24, 0x4E	; 78
     d92:	61 f5       	brne	.+88     	; 0xdec <__stack+0x58d>
				{
					if(maze_visited_status[get_index(1+current_state[0])][get_index(current_state[1])] == 0)
     d94:	0f 2e       	mov	r0, r31
     d96:	f1 e7       	ldi	r31, 0x71	; 113
     d98:	cf 2e       	mov	r12, r31
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	df 2e       	mov	r13, r31
     d9e:	f0 2d       	mov	r31, r0
     da0:	f6 01       	movw	r30, r12
     da2:	80 81       	ld	r24, Z
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     daa:	f8 2e       	mov	r15, r24
     dac:	d6 01       	movw	r26, r12
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	8c 91       	ld	r24, X
     db2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     db6:	2f 2d       	mov	r18, r15
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	a9 01       	movw	r20, r18
     dbc:	44 0f       	add	r20, r20
     dbe:	55 1f       	adc	r21, r21
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	24 0f       	add	r18, r20
     dc6:	35 1f       	adc	r19, r21
     dc8:	29 55       	subi	r18, 0x59	; 89
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	f9 01       	movw	r30, r18
     dce:	e8 0f       	add	r30, r24
     dd0:	f1 1d       	adc	r31, r1
     dd2:	80 81       	ld	r24, Z
     dd4:	81 11       	cpse	r24, r1
     dd6:	97 c0       	rjmp	.+302    	; 0xf06 <__stack+0x6a7>
						dimensions[count++] = 'N';  
     dd8:	e1 e0       	ldi	r30, 0x01	; 1
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	ec 0f       	add	r30, r28
     dde:	fd 1f       	adc	r31, r29
     de0:	e0 0f       	add	r30, r16
     de2:	f1 1d       	adc	r31, r1
     de4:	8e e4       	ldi	r24, 0x4E	; 78
     de6:	80 83       	st	Z, r24
     de8:	0f 5f       	subi	r16, 0xFF	; 255
     dea:	8d c0       	rjmp	.+282    	; 0xf06 <__stack+0x6a7>
				}
				else if(comp_action == 'E')
     dec:	85 34       	cpi	r24, 0x45	; 69
     dee:	61 f5       	brne	.+88     	; 0xe48 <__stack+0x5e9>
				{
					if(maze_visited_status[get_index(current_state[0])][get_index(1+current_state[1])] == 0)
     df0:	0f 2e       	mov	r0, r31
     df2:	f1 e7       	ldi	r31, 0x71	; 113
     df4:	cf 2e       	mov	r12, r31
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	df 2e       	mov	r13, r31
     dfa:	f0 2d       	mov	r31, r0
     dfc:	f6 01       	movw	r30, r12
     dfe:	80 81       	ld	r24, Z
     e00:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     e04:	f8 2e       	mov	r15, r24
     e06:	d6 01       	movw	r26, r12
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	8c 91       	ld	r24, X
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     e12:	2f 2d       	mov	r18, r15
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	a9 01       	movw	r20, r18
     e18:	44 0f       	add	r20, r20
     e1a:	55 1f       	adc	r21, r21
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	24 0f       	add	r18, r20
     e22:	35 1f       	adc	r19, r21
     e24:	29 55       	subi	r18, 0x59	; 89
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	f9 01       	movw	r30, r18
     e2a:	e8 0f       	add	r30, r24
     e2c:	f1 1d       	adc	r31, r1
     e2e:	80 81       	ld	r24, Z
     e30:	81 11       	cpse	r24, r1
     e32:	69 c0       	rjmp	.+210    	; 0xf06 <__stack+0x6a7>
						dimensions[count++] = 'E';
     e34:	e1 e0       	ldi	r30, 0x01	; 1
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	ec 0f       	add	r30, r28
     e3a:	fd 1f       	adc	r31, r29
     e3c:	e0 0f       	add	r30, r16
     e3e:	f1 1d       	adc	r31, r1
     e40:	85 e4       	ldi	r24, 0x45	; 69
     e42:	80 83       	st	Z, r24
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	5f c0       	rjmp	.+190    	; 0xf06 <__stack+0x6a7>
				}
				else if(comp_action == 'S')
     e48:	83 35       	cpi	r24, 0x53	; 83
     e4a:	69 f5       	brne	.+90     	; 0xea6 <__stack+0x647>
				{
					if(maze_visited_status[get_index(current_state[0])-1][get_index(current_state[1])] == 0)
     e4c:	0f 2e       	mov	r0, r31
     e4e:	f1 e7       	ldi	r31, 0x71	; 113
     e50:	cf 2e       	mov	r12, r31
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	df 2e       	mov	r13, r31
     e56:	f0 2d       	mov	r31, r0
     e58:	f6 01       	movw	r30, r12
     e5a:	80 81       	ld	r24, Z
     e5c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     e60:	e8 2e       	mov	r14, r24
     e62:	f1 2c       	mov	r15, r1
     e64:	f1 e0       	ldi	r31, 0x01	; 1
     e66:	ef 1a       	sub	r14, r31
     e68:	f1 08       	sbc	r15, r1
     e6a:	d6 01       	movw	r26, r12
     e6c:	11 96       	adiw	r26, 0x01	; 1
     e6e:	8c 91       	ld	r24, X
     e70:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     e74:	97 01       	movw	r18, r14
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	22 0f       	add	r18, r18
     e7c:	33 1f       	adc	r19, r19
     e7e:	2e 0d       	add	r18, r14
     e80:	3f 1d       	adc	r19, r15
     e82:	29 55       	subi	r18, 0x59	; 89
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	f9 01       	movw	r30, r18
     e88:	e8 0f       	add	r30, r24
     e8a:	f1 1d       	adc	r31, r1
     e8c:	80 81       	ld	r24, Z
     e8e:	81 11       	cpse	r24, r1
     e90:	3a c0       	rjmp	.+116    	; 0xf06 <__stack+0x6a7>
					dimensions[count++] = 'S';
     e92:	e1 e0       	ldi	r30, 0x01	; 1
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	ec 0f       	add	r30, r28
     e98:	fd 1f       	adc	r31, r29
     e9a:	e0 0f       	add	r30, r16
     e9c:	f1 1d       	adc	r31, r1
     e9e:	83 e5       	ldi	r24, 0x53	; 83
     ea0:	80 83       	st	Z, r24
     ea2:	0f 5f       	subi	r16, 0xFF	; 255
     ea4:	30 c0       	rjmp	.+96     	; 0xf06 <__stack+0x6a7>
				}
				else if(comp_action == 'W')
     ea6:	87 35       	cpi	r24, 0x57	; 87
     ea8:	71 f5       	brne	.+92     	; 0xf06 <__stack+0x6a7>
				{
					if(maze_visited_status[get_index(current_state[0])][get_index(current_state[1])-1] == 0)
     eaa:	0f 2e       	mov	r0, r31
     eac:	f1 e7       	ldi	r31, 0x71	; 113
     eae:	cf 2e       	mov	r12, r31
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	df 2e       	mov	r13, r31
     eb4:	f0 2d       	mov	r31, r0
     eb6:	f6 01       	movw	r30, r12
     eb8:	80 81       	ld	r24, Z
     eba:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     ebe:	f8 2e       	mov	r15, r24
     ec0:	d6 01       	movw	r26, r12
     ec2:	11 96       	adiw	r26, 0x01	; 1
     ec4:	8c 91       	ld	r24, X
     ec6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9c 01       	movw	r18, r24
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	31 09       	sbc	r19, r1
     ed2:	8f 2d       	mov	r24, r15
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	ac 01       	movw	r20, r24
     ed8:	44 0f       	add	r20, r20
     eda:	55 1f       	adc	r21, r21
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	84 0f       	add	r24, r20
     ee2:	95 1f       	adc	r25, r21
     ee4:	89 55       	subi	r24, 0x59	; 89
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	fc 01       	movw	r30, r24
     eea:	e2 0f       	add	r30, r18
     eec:	f3 1f       	adc	r31, r19
     eee:	80 81       	ld	r24, Z
     ef0:	81 11       	cpse	r24, r1
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <__stack+0x6a7>
						dimensions[count++] = 'W';
     ef4:	e1 e0       	ldi	r30, 0x01	; 1
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	ec 0f       	add	r30, r28
     efa:	fd 1f       	adc	r31, r29
     efc:	e0 0f       	add	r30, r16
     efe:	f1 1d       	adc	r31, r1
     f00:	87 e5       	ldi	r24, 0x57	; 87
     f02:	80 83       	st	Z, r24
     f04:	0f 5f       	subi	r16, 0xFF	; 255
			
	}
	else if (maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] == 1)
	{
		get_status();
		for (uint8_t i = 0 ; i < 3  ; i++)
     f06:	1f 5f       	subi	r17, 0xFF	; 255
     f08:	13 30       	cpi	r17, 0x03	; 3
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <__stack+0x6af>
     f0c:	33 cf       	rjmp	.-410    	; 0xd74 <__stack+0x515>

			}

		}
		
		if(Ultrasonic_Read(Front) > 50 )
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	48 e4       	ldi	r20, 0x48	; 72
     f1a:	52 e4       	ldi	r21, 0x42	; 66
     f1c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     f20:	18 16       	cp	r1, r24
     f22:	24 f4       	brge	.+8      	; 0xf2c <__stack+0x6cd>
		{
			End_of_maze = 1 ;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <End_of_maze>
     f2a:	96 c0       	rjmp	.+300    	; 0x1058 <__stack+0x7f9>
			// go front
		}
		else if(Ultrasonic_Read(Right) > 50)
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	48 e4       	ldi	r20, 0x48	; 72
     f38:	52 e4       	ldi	r21, 0x42	; 66
     f3a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     f3e:	18 16       	cp	r1, r24
     f40:	24 f4       	brge	.+8      	; 0xf4a <__stack+0x6eb>
		{
			End_of_maze = 1 ;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <End_of_maze>
     f48:	87 c0       	rjmp	.+270    	; 0x1058 <__stack+0x7f9>
			// go right
		}
		else if (Ultrasonic_Read(Left) > 50)
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 42 01 	call	0x284	; 0x284 <Ultrasonic_Read>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	48 e4       	ldi	r20, 0x48	; 72
     f56:	52 e4       	ldi	r21, 0x42	; 66
     f58:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	24 f4       	brge	.+8      	; 0xf68 <__stack+0x709>
		{
			End_of_maze = 1 ; 
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <End_of_maze>
     f66:	78 c0       	rjmp	.+240    	; 0x1058 <__stack+0x7f9>
			// go left
		}
       else if(dimensions[0] != 0 )
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <__stack+0x711>
     f6e:	40 c0       	rjmp	.+128    	; 0xff0 <__stack+0x791>
		 {
			comp_action =   dimensions[get_random_action(count)];
     f70:	80 2f       	mov	r24, r16
     f72:	0e 94 56 02 	call	0x4ac	; 0x4ac <get_random_action>
     f76:	e1 e0       	ldi	r30, 0x01	; 1
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	ec 0f       	add	r30, r28
     f7c:	fd 1f       	adc	r31, r29
     f7e:	e8 0f       	add	r30, r24
     f80:	f1 1d       	adc	r31, r1
     f82:	80 81       	ld	r24, Z
     f84:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <comp_action>
			compass_direction_to_usual_direction(comp_action,new_north);
     f88:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <new_north>
     f8c:	0e 94 03 03 	call	0x606	; 0x606 <compass_direction_to_usual_direction>
			maze_visited_status[get_index(current_state[0])][get_index(current_state[1])]=1;
     f90:	01 e7       	ldi	r16, 0x71	; 113
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	f8 01       	movw	r30, r16
     f96:	80 81       	ld	r24, Z
     f98:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     f9c:	e8 2e       	mov	r14, r24
     f9e:	f1 2c       	mov	r15, r1
     fa0:	d8 01       	movw	r26, r16
     fa2:	11 96       	adiw	r26, 0x01	; 1
     fa4:	8c 91       	ld	r24, X
     fa6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     faa:	97 01       	movw	r18, r14
     fac:	22 0f       	add	r18, r18
     fae:	33 1f       	adc	r19, r19
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	2e 0d       	add	r18, r14
     fb6:	3f 1d       	adc	r19, r15
     fb8:	29 55       	subi	r18, 0x59	; 89
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	f9 01       	movw	r30, r18
     fbe:	e8 0f       	add	r30, r24
     fc0:	f1 1d       	adc	r31, r1
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	80 83       	st	Z, r24
			// move to uaual action
			current_state_update(comp_action);
     fc6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <comp_action>
     fca:	0e 94 b9 03 	call	0x772	; 0x772 <current_state_update>
			track_counter++;
     fce:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <track_counter>
     fd2:	ef 5f       	subi	r30, 0xFF	; 255
     fd4:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <track_counter>
			track_memory[track_counter][0] = current_state[0];
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	d8 01       	movw	r26, r16
     fdc:	8c 91       	ld	r24, X
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	eb 58       	subi	r30, 0x8B	; 139
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	80 83       	st	Z, r24
			track_memory[track_counter][1] = current_state[1];
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	8c 91       	ld	r24, X
     fec:	81 83       	std	Z+1, r24	; 0x01
     fee:	34 c0       	rjmp	.+104    	; 0x1058 <__stack+0x7f9>
		 }
		 else 
		 {
			 maze_visited_status[get_index(current_state[0])][get_index(current_state[1])] = 2 ;
     ff0:	01 e7       	ldi	r16, 0x71	; 113
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	f8 01       	movw	r30, r16
     ff6:	80 81       	ld	r24, Z
     ff8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
     ffc:	e8 2e       	mov	r14, r24
     ffe:	f1 2c       	mov	r15, r1
    1000:	d8 01       	movw	r26, r16
    1002:	11 96       	adiw	r26, 0x01	; 1
    1004:	8c 91       	ld	r24, X
    1006:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <get_index>
    100a:	97 01       	movw	r18, r14
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	22 0f       	add	r18, r18
    1012:	33 1f       	adc	r19, r19
    1014:	2e 0d       	add	r18, r14
    1016:	3f 1d       	adc	r19, r15
    1018:	29 55       	subi	r18, 0x59	; 89
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	f9 01       	movw	r30, r18
    101e:	e8 0f       	add	r30, r24
    1020:	f1 1d       	adc	r31, r1
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	80 83       	st	Z, r24
			 track_memory[track_counter][0]=0;
    1026:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <track_counter>
    102a:	ae 2f       	mov	r26, r30
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	aa 0f       	add	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	ab 58       	subi	r26, 0x8B	; 139
    1034:	bf 4f       	sbci	r27, 0xFF	; 255
    1036:	1c 92       	st	X, r1
			 track_memory[track_counter][1]=0;
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	1c 92       	st	X, r1
			 track_counter--;
    103c:	e1 50       	subi	r30, 0x01	; 1
    103e:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <track_counter>
			 current_state[0] = track_memory[track_counter][0];
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	eb 58       	subi	r30, 0x8B	; 139
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	80 81       	ld	r24, Z
    104e:	d8 01       	movw	r26, r16
    1050:	8c 93       	st	X, r24
			 current_state[1] = track_memory[track_counter][1];
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	11 96       	adiw	r26, 0x01	; 1
    1056:	8c 93       	st	X, r24
		 }
		 
		 
	}
	
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	bf 90       	pop	r11
    1072:	af 90       	pop	r10
    1074:	9f 90       	pop	r9
    1076:	8f 90       	pop	r8
    1078:	7f 90       	pop	r7
    107a:	6f 90       	pop	r6
    107c:	5f 90       	pop	r5
    107e:	08 95       	ret

00001080 <main>:



int main(void)
{
	srand(time(NULL));
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 49 00 	call	0x92	; 0x92 <time>
    1088:	cb 01       	movw	r24, r22
    108a:	0e 94 ce 0c 	call	0x199c	; 0x199c <srand>
	LCDInit();
    108e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LCDInit>

	DC_Motor_Init(PORTB , GPIO_PinNumber_4 , GPIO_PinNumber_5 );
    1092:	45 e0       	ldi	r20, 0x05	; 5
    1094:	64 e0       	ldi	r22, 0x04	; 4
    1096:	86 e3       	ldi	r24, 0x36	; 54
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 5c 00 	call	0xb8	; 0xb8 <DC_Motor_Init>
    Ultrasonic_Init();
    109e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Ultrasonic_Init>




	while (!End_of_maze)
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <main+0x28>
	{
          take_action();
    10a4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <take_action>
    Ultrasonic_Init();




	while (!End_of_maze)
    10a8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <End_of_maze>
    10ac:	88 23       	and	r24, r24
    10ae:	d1 f3       	breq	.-12     	; 0x10a4 <main+0x24>
	{
          take_action();
    }
	
	 return 0 ;
}
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <MCAL_GPIO_INIT_PIN>:
	return (PORTx->PIN >> PIN_NUMBER & 1);
}

unsigned char MCAL_GPIO_READ_PORT(struct GPIO_t * PORTx){
	return PORTx->PIN;
}
    10b6:	fc 01       	movw	r30, r24
    10b8:	db 01       	movw	r26, r22
    10ba:	11 96       	adiw	r26, 0x01	; 1
    10bc:	2c 91       	ld	r18, X
    10be:	11 97       	sbiw	r26, 0x01	; 1
    10c0:	21 11       	cpse	r18, r1
    10c2:	20 c0       	rjmp	.+64     	; 0x1104 <MCAL_GPIO_INIT_PIN+0x4e>
    10c4:	41 81       	ldd	r20, Z+1	; 0x01
    10c6:	5c 91       	ld	r21, X
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	bc 01       	movw	r22, r24
    10ce:	05 2e       	mov	r0, r21
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <MCAL_GPIO_INIT_PIN+0x20>
    10d2:	66 0f       	add	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <MCAL_GPIO_INIT_PIN+0x1c>
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <MCAL_GPIO_INIT_PIN+0x2c>
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	5a 95       	dec	r21
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <MCAL_GPIO_INIT_PIN+0x28>
    10e6:	36 2f       	mov	r19, r22
    10e8:	30 95       	com	r19
    10ea:	34 23       	and	r19, r20
    10ec:	23 2b       	or	r18, r19
    10ee:	21 83       	std	Z+1, r18	; 0x01
    10f0:	0c 90       	ld	r0, X
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <MCAL_GPIO_INIT_PIN+0x42>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <MCAL_GPIO_INIT_PIN+0x3e>
    10fc:	92 81       	ldd	r25, Z+2	; 0x02
    10fe:	89 23       	and	r24, r25
    1100:	82 83       	std	Z+2, r24	; 0x02
    1102:	08 95       	ret
    1104:	22 30       	cpi	r18, 0x02	; 2
    1106:	c1 f4       	brne	.+48     	; 0x1138 <MCAL_GPIO_INIT_PIN+0x82>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9c 01       	movw	r18, r24
    110e:	0c 90       	ld	r0, X
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <MCAL_GPIO_INIT_PIN+0x60>
    1112:	22 0f       	add	r18, r18
    1114:	33 1f       	adc	r19, r19
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <MCAL_GPIO_INIT_PIN+0x5c>
    111a:	20 95       	com	r18
    111c:	31 81       	ldd	r19, Z+1	; 0x01
    111e:	23 23       	and	r18, r19
    1120:	21 83       	std	Z+1, r18	; 0x01
    1122:	0c 90       	ld	r0, X
    1124:	02 c0       	rjmp	.+4      	; 0x112a <MCAL_GPIO_INIT_PIN+0x74>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <MCAL_GPIO_INIT_PIN+0x70>
    112e:	80 95       	com	r24
    1130:	92 81       	ldd	r25, Z+2	; 0x02
    1132:	89 23       	and	r24, r25
    1134:	82 83       	std	Z+2, r24	; 0x02
    1136:	08 95       	ret
    1138:	41 81       	ldd	r20, Z+1	; 0x01
    113a:	5c 91       	ld	r21, X
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	05 2e       	mov	r0, r21
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <MCAL_GPIO_INIT_PIN+0x92>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <MCAL_GPIO_INIT_PIN+0x8e>
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <MCAL_GPIO_INIT_PIN+0x9e>
    1150:	22 0f       	add	r18, r18
    1152:	33 1f       	adc	r19, r19
    1154:	5a 95       	dec	r21
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <MCAL_GPIO_INIT_PIN+0x9a>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	28 2b       	or	r18, r24
    115e:	21 83       	std	Z+1, r18	; 0x01
    1160:	08 95       	ret

00001162 <MCAL_GPIO_WRITE_PIN>:


void MCAL_GPIO_WRITE_PIN(struct GPIO_t * PORTx , unsigned char PIN_NUMBER , unsigned char VAL){
    1162:	fc 01       	movw	r30, r24
	PORTx->PORT = (PORTx->PORT & ~(1 << PIN_NUMBER)) | (VAL << PIN_NUMBER);
    1164:	92 81       	ldd	r25, Z+2	; 0x02
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	06 2e       	mov	r0, r22
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <MCAL_GPIO_WRITE_PIN+0x10>
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <MCAL_GPIO_WRITE_PIN+0xc>
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <MCAL_GPIO_WRITE_PIN+0x1c>
    117a:	44 0f       	add	r20, r20
    117c:	55 1f       	adc	r21, r21
    117e:	6a 95       	dec	r22
    1180:	e2 f7       	brpl	.-8      	; 0x117a <MCAL_GPIO_WRITE_PIN+0x18>
    1182:	20 95       	com	r18
    1184:	29 23       	and	r18, r25
    1186:	42 2b       	or	r20, r18
    1188:	42 83       	std	Z+2, r20	; 0x02
    118a:	08 95       	ret

0000118c <MCAL_TIMER0_GPIO_SetPINS>:
	
	Timer2->OCR2 = timcfg->OCR2;
	
	Timer2->ASSR = (Timer2->ASSR & ~(1 << 3)) | timcfg->AS2;
	
	MCAL_TIMER2_GPIO_SetPINS();
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	00 d0       	rcall	.+0      	; 0x1192 <MCAL_TIMER0_GPIO_SetPINS+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	8a 83       	std	Y+2, r24	; 0x02
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	be 01       	movw	r22, r28
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	86 e3       	ldi	r24, 0x36	; 54
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <MCAL_TIMER0_INIT>:
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	0e 94 c6 08 	call	0x118c	; 0x118c <MCAL_TIMER0_GPIO_SetPINS>
    11c0:	8f 81       	ldd	r24, Y+7	; 0x07
    11c2:	88 23       	and	r24, r24
    11c4:	91 f0       	breq	.+36     	; 0x11ea <MCAL_TIMER0_INIT+0x34>
    11c6:	8f b7       	in	r24, 0x3f	; 63
    11c8:	80 68       	ori	r24, 0x80	; 128
    11ca:	8f bf       	out	0x3f, r24	; 63
    11cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    11d0:	90 93 cf 00 	sts	0x00CF, r25	; 0x8000cf <GP_TIMER0_Compare_Match+0x1>
    11d4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <GP_TIMER0_Compare_Match>
    11d8:	88 85       	ldd	r24, Y+8	; 0x08
    11da:	99 85       	ldd	r25, Y+9	; 0x09
    11dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <GP_TIMER0_OverFlow+0x1>
    11e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <GP_TIMER0_OverFlow>
    11e4:	89 b7       	in	r24, 0x39	; 57
    11e6:	81 60       	ori	r24, 0x01	; 1
    11e8:	89 bf       	out	0x39, r24	; 57
    11ea:	8e 81       	ldd	r24, Y+6	; 0x06
    11ec:	8c bf       	out	0x3c, r24	; 60
    11ee:	83 b7       	in	r24, 0x33	; 51
    11f0:	84 66       	ori	r24, 0x64	; 100
    11f2:	83 bf       	out	0x33, r24	; 51
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	92 b7       	in	r25, 0x32	; 50
    11f8:	89 2b       	or	r24, r25
    11fa:	82 bf       	out	0x32, r24	; 50
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <MCAL_TIMER1_GPIO_SetPINS>:
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	00 d0       	rcall	.+0      	; 0x120a <MCAL_TIMER1_GPIO_SetPINS+0x8>
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	11 e0       	ldi	r17, 0x01	; 1
    1210:	1a 83       	std	Y+2, r17	; 0x02
    1212:	85 e0       	ldi	r24, 0x05	; 5
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	be 01       	movw	r22, r28
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
    1224:	1a 83       	std	Y+2, r17	; 0x02
    1226:	84 e0       	ldi	r24, 0x04	; 4
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	be 01       	movw	r22, r28
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	80 e3       	ldi	r24, 0x30	; 48
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
    1238:	1a 82       	std	Y+2, r1	; 0x02
    123a:	86 e0       	ldi	r24, 0x06	; 6
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	be 01       	movw	r22, r28
    1240:	6f 5f       	subi	r22, 0xFF	; 255
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	80 e3       	ldi	r24, 0x30	; 48
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MCAL_GPIO_INIT_PIN>
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	08 95       	ret

00001258 <MCAL_TIMER1_INIT>:
    1258:	fc 01       	movw	r30, r24
    125a:	81 89       	ldd	r24, Z+17	; 0x11
    125c:	88 23       	and	r24, r24
    125e:	f1 f0       	breq	.+60     	; 0x129c <MCAL_TIMER1_INIT+0x44>
    1260:	8f b7       	in	r24, 0x3f	; 63
    1262:	80 68       	ori	r24, 0x80	; 128
    1264:	8f bf       	out	0x3f, r24	; 63
    1266:	82 89       	ldd	r24, Z+18	; 0x12
    1268:	93 89       	ldd	r25, Z+19	; 0x13
    126a:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <GP_TICIE1_InputCapture+0x1>
    126e:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <GP_TICIE1_InputCapture>
    1272:	24 89       	ldd	r18, Z+20	; 0x14
    1274:	35 89       	ldd	r19, Z+21	; 0x15
    1276:	30 93 d1 00 	sts	0x00D1, r19	; 0x8000d1 <GP_OCIE1A_Compare_MatchA+0x1>
    127a:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <GP_OCIE1A_Compare_MatchA>
    127e:	90 93 cb 00 	sts	0x00CB, r25	; 0x8000cb <GP_TOIE1_OverFlow+0x1>
    1282:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <GP_TOIE1_OverFlow>
    1286:	86 89       	ldd	r24, Z+22	; 0x16
    1288:	97 89       	ldd	r25, Z+23	; 0x17
    128a:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <GP_OCIE1B_Compare_MatchB+0x1>
    128e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <GP_OCIE1B_Compare_MatchB>
    1292:	89 b7       	in	r24, 0x39	; 57
    1294:	91 89       	ldd	r25, Z+17	; 0x11
    1296:	83 7c       	andi	r24, 0xC3	; 195
    1298:	89 2b       	or	r24, r25
    129a:	89 bf       	out	0x39, r24	; 57
    129c:	3f b5       	in	r19, 0x2f	; 47
    129e:	80 85       	ldd	r24, Z+8	; 0x08
    12a0:	3f 73       	andi	r19, 0x3F	; 63
    12a2:	38 2b       	or	r19, r24
    12a4:	3f bd       	out	0x2f, r19	; 47
    12a6:	81 85       	ldd	r24, Z+9	; 0x09
    12a8:	3f 7c       	andi	r19, 0xCF	; 207
    12aa:	38 2b       	or	r19, r24
    12ac:	3f bd       	out	0x2f, r19	; 47
    12ae:	2e b5       	in	r18, 0x2e	; 46
    12b0:	83 81       	ldd	r24, Z+3	; 0x03
    12b2:	2f 77       	andi	r18, 0x7F	; 127
    12b4:	28 2b       	or	r18, r24
    12b6:	2e bd       	out	0x2e, r18	; 46
    12b8:	94 81       	ldd	r25, Z+4	; 0x04
    12ba:	2f 7b       	andi	r18, 0xBF	; 191
    12bc:	29 2b       	or	r18, r25
    12be:	2e bd       	out	0x2e, r18	; 46
    12c0:	92 85       	ldd	r25, Z+10	; 0x0a
    12c2:	28 7f       	andi	r18, 0xF8	; 248
    12c4:	29 2b       	or	r18, r25
    12c6:	2e bd       	out	0x2e, r18	; 46
    12c8:	84 85       	ldd	r24, Z+12	; 0x0c
    12ca:	8d bd       	out	0x2d, r24	; 45
    12cc:	83 85       	ldd	r24, Z+11	; 0x0b
    12ce:	8c bd       	out	0x2c, r24	; 44
    12d0:	86 85       	ldd	r24, Z+14	; 0x0e
    12d2:	8b bd       	out	0x2b, r24	; 43
    12d4:	85 85       	ldd	r24, Z+13	; 0x0d
    12d6:	8a bd       	out	0x2a, r24	; 42
    12d8:	80 89       	ldd	r24, Z+16	; 0x10
    12da:	89 bd       	out	0x29, r24	; 41
    12dc:	87 85       	ldd	r24, Z+15	; 0x0f
    12de:	88 bd       	out	0x28, r24	; 40
    12e0:	87 81       	ldd	r24, Z+7	; 0x07
    12e2:	3c 7f       	andi	r19, 0xFC	; 252
    12e4:	83 70       	andi	r24, 0x03	; 3
    12e6:	38 2b       	or	r19, r24
    12e8:	3f bd       	out	0x2f, r19	; 47
    12ea:	97 81       	ldd	r25, Z+7	; 0x07
    12ec:	96 95       	lsr	r25
    12ee:	96 95       	lsr	r25
    12f0:	93 70       	andi	r25, 0x03	; 3
    12f2:	89 2f       	mov	r24, r25
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	27 7e       	andi	r18, 0xE7	; 231
    1304:	82 2b       	or	r24, r18
    1306:	8e bd       	out	0x2e, r24	; 46
    1308:	0e 94 01 09 	call	0x1202	; 0x1202 <MCAL_TIMER1_GPIO_SetPINS>
    130c:	08 95       	ret

0000130e <__vector_11>:
//			 |\_______________________________________/|


void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
	GP_TIMER0_OverFlow();
    1330:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <GP_TIMER0_OverFlow>
    1334:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <GP_TIMER0_OverFlow+0x1>
    1338:	09 95       	icall
}
    133a:	ff 91       	pop	r31
    133c:	ef 91       	pop	r30
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <__vector_10>:


void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    135c:	1f 92       	push	r1
    135e:	0f 92       	push	r0
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	0f 92       	push	r0
    1364:	11 24       	eor	r1, r1
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
	GP_TIMER0_Compare_Match();
    137e:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <GP_TIMER0_Compare_Match>
    1382:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <GP_TIMER0_Compare_Match+0x1>
    1386:	09 95       	icall
}
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	0f 90       	pop	r0
    13a6:	1f 90       	pop	r1
    13a8:	18 95       	reti

000013aa <__vector_5>:
//			 |\__________		Timer 2		__________/|
//			 |\_______________________________________/|

void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	6f 93       	push	r22
    13be:	7f 93       	push	r23
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	af 93       	push	r26
    13c6:	bf 93       	push	r27
    13c8:	ef 93       	push	r30
    13ca:	ff 93       	push	r31
	GP_TOIE2_OverFlow();
    13cc:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <GP_TOIE2_OverFlow>
    13d0:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <GP_TOIE2_OverFlow+0x1>
    13d4:	09 95       	icall
}
    13d6:	ff 91       	pop	r31
    13d8:	ef 91       	pop	r30
    13da:	bf 91       	pop	r27
    13dc:	af 91       	pop	r26
    13de:	9f 91       	pop	r25
    13e0:	8f 91       	pop	r24
    13e2:	7f 91       	pop	r23
    13e4:	6f 91       	pop	r22
    13e6:	5f 91       	pop	r21
    13e8:	4f 91       	pop	r20
    13ea:	3f 91       	pop	r19
    13ec:	2f 91       	pop	r18
    13ee:	0f 90       	pop	r0
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_4>:

void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	0f 92       	push	r0
    1400:	11 24       	eor	r1, r1
    1402:	2f 93       	push	r18
    1404:	3f 93       	push	r19
    1406:	4f 93       	push	r20
    1408:	5f 93       	push	r21
    140a:	6f 93       	push	r22
    140c:	7f 93       	push	r23
    140e:	8f 93       	push	r24
    1410:	9f 93       	push	r25
    1412:	af 93       	push	r26
    1414:	bf 93       	push	r27
    1416:	ef 93       	push	r30
    1418:	ff 93       	push	r31
	GP_OCIE2_Compare_Match();
    141a:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <GP_OCIE2_Compare_Match>
    141e:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <GP_OCIE2_Compare_Match+0x1>
    1422:	09 95       	icall
}
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_6>:
//			 |\__________		Timer 1		__________/|
//			 |\_______________________________________/|

void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	2f 93       	push	r18
    1452:	3f 93       	push	r19
    1454:	4f 93       	push	r20
    1456:	5f 93       	push	r21
    1458:	6f 93       	push	r22
    145a:	7f 93       	push	r23
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	af 93       	push	r26
    1462:	bf 93       	push	r27
    1464:	ef 93       	push	r30
    1466:	ff 93       	push	r31
	GP_TICIE1_InputCapture();
    1468:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <GP_TICIE1_InputCapture>
    146c:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <GP_TICIE1_InputCapture+0x1>
    1470:	09 95       	icall

}
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <__vector_7>:


void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 93       	push	r18
    14a0:	3f 93       	push	r19
    14a2:	4f 93       	push	r20
    14a4:	5f 93       	push	r21
    14a6:	6f 93       	push	r22
    14a8:	7f 93       	push	r23
    14aa:	8f 93       	push	r24
    14ac:	9f 93       	push	r25
    14ae:	af 93       	push	r26
    14b0:	bf 93       	push	r27
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
	GP_OCIE1A_Compare_MatchA();
    14b6:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <GP_OCIE1A_Compare_MatchA>
    14ba:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <GP_OCIE1A_Compare_MatchA+0x1>
    14be:	09 95       	icall
}
    14c0:	ff 91       	pop	r31
    14c2:	ef 91       	pop	r30
    14c4:	bf 91       	pop	r27
    14c6:	af 91       	pop	r26
    14c8:	9f 91       	pop	r25
    14ca:	8f 91       	pop	r24
    14cc:	7f 91       	pop	r23
    14ce:	6f 91       	pop	r22
    14d0:	5f 91       	pop	r21
    14d2:	4f 91       	pop	r20
    14d4:	3f 91       	pop	r19
    14d6:	2f 91       	pop	r18
    14d8:	0f 90       	pop	r0
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	0f 90       	pop	r0
    14de:	1f 90       	pop	r1
    14e0:	18 95       	reti

000014e2 <__vector_8>:



void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
    14e2:	1f 92       	push	r1
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	0f 92       	push	r0
    14ea:	11 24       	eor	r1, r1
    14ec:	2f 93       	push	r18
    14ee:	3f 93       	push	r19
    14f0:	4f 93       	push	r20
    14f2:	5f 93       	push	r21
    14f4:	6f 93       	push	r22
    14f6:	7f 93       	push	r23
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	af 93       	push	r26
    14fe:	bf 93       	push	r27
    1500:	ef 93       	push	r30
    1502:	ff 93       	push	r31
	GP_OCIE1B_Compare_MatchB();
    1504:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <GP_OCIE1B_Compare_MatchB>
    1508:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <GP_OCIE1B_Compare_MatchB+0x1>
    150c:	09 95       	icall

}
    150e:	ff 91       	pop	r31
    1510:	ef 91       	pop	r30
    1512:	bf 91       	pop	r27
    1514:	af 91       	pop	r26
    1516:	9f 91       	pop	r25
    1518:	8f 91       	pop	r24
    151a:	7f 91       	pop	r23
    151c:	6f 91       	pop	r22
    151e:	5f 91       	pop	r21
    1520:	4f 91       	pop	r20
    1522:	3f 91       	pop	r19
    1524:	2f 91       	pop	r18
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_9>:


void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	2f 93       	push	r18
    153c:	3f 93       	push	r19
    153e:	4f 93       	push	r20
    1540:	5f 93       	push	r21
    1542:	6f 93       	push	r22
    1544:	7f 93       	push	r23
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	ef 93       	push	r30
    1550:	ff 93       	push	r31
	GP_TOIE1_OverFlow();
    1552:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <GP_TOIE1_OverFlow>
    1556:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <GP_TOIE1_OverFlow+0x1>
    155a:	09 95       	icall
}
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__divsf3>:
    157e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__divsf3x>
    1582:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__fp_round>
    1586:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fp_pscB>
    158a:	58 f0       	brcs	.+22     	; 0x15a2 <__divsf3+0x24>
    158c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fp_pscA>
    1590:	40 f0       	brcs	.+16     	; 0x15a2 <__divsf3+0x24>
    1592:	29 f4       	brne	.+10     	; 0x159e <__divsf3+0x20>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	29 f0       	breq	.+10     	; 0x15a2 <__divsf3+0x24>
    1598:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_inf>
    159c:	51 11       	cpse	r21, r1
    159e:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_szero>
    15a2:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__fp_nan>

000015a6 <__divsf3x>:
    15a6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_split3>
    15aa:	68 f3       	brcs	.-38     	; 0x1586 <__divsf3+0x8>

000015ac <__divsf3_pse>:
    15ac:	99 23       	and	r25, r25
    15ae:	b1 f3       	breq	.-20     	; 0x159c <__divsf3+0x1e>
    15b0:	55 23       	and	r21, r21
    15b2:	91 f3       	breq	.-28     	; 0x1598 <__divsf3+0x1a>
    15b4:	95 1b       	sub	r25, r21
    15b6:	55 0b       	sbc	r21, r21
    15b8:	bb 27       	eor	r27, r27
    15ba:	aa 27       	eor	r26, r26
    15bc:	62 17       	cp	r22, r18
    15be:	73 07       	cpc	r23, r19
    15c0:	84 07       	cpc	r24, r20
    15c2:	38 f0       	brcs	.+14     	; 0x15d2 <__divsf3_pse+0x26>
    15c4:	9f 5f       	subi	r25, 0xFF	; 255
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255
    15c8:	22 0f       	add	r18, r18
    15ca:	33 1f       	adc	r19, r19
    15cc:	44 1f       	adc	r20, r20
    15ce:	aa 1f       	adc	r26, r26
    15d0:	a9 f3       	breq	.-22     	; 0x15bc <__divsf3_pse+0x10>
    15d2:	35 d0       	rcall	.+106    	; 0x163e <__divsf3_pse+0x92>
    15d4:	0e 2e       	mov	r0, r30
    15d6:	3a f0       	brmi	.+14     	; 0x15e6 <__divsf3_pse+0x3a>
    15d8:	e0 e8       	ldi	r30, 0x80	; 128
    15da:	32 d0       	rcall	.+100    	; 0x1640 <__divsf3_pse+0x94>
    15dc:	91 50       	subi	r25, 0x01	; 1
    15de:	50 40       	sbci	r21, 0x00	; 0
    15e0:	e6 95       	lsr	r30
    15e2:	00 1c       	adc	r0, r0
    15e4:	ca f7       	brpl	.-14     	; 0x15d8 <__divsf3_pse+0x2c>
    15e6:	2b d0       	rcall	.+86     	; 0x163e <__divsf3_pse+0x92>
    15e8:	fe 2f       	mov	r31, r30
    15ea:	29 d0       	rcall	.+82     	; 0x163e <__divsf3_pse+0x92>
    15ec:	66 0f       	add	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	88 1f       	adc	r24, r24
    15f2:	bb 1f       	adc	r27, r27
    15f4:	26 17       	cp	r18, r22
    15f6:	37 07       	cpc	r19, r23
    15f8:	48 07       	cpc	r20, r24
    15fa:	ab 07       	cpc	r26, r27
    15fc:	b0 e8       	ldi	r27, 0x80	; 128
    15fe:	09 f0       	breq	.+2      	; 0x1602 <__divsf3_pse+0x56>
    1600:	bb 0b       	sbc	r27, r27
    1602:	80 2d       	mov	r24, r0
    1604:	bf 01       	movw	r22, r30
    1606:	ff 27       	eor	r31, r31
    1608:	93 58       	subi	r25, 0x83	; 131
    160a:	5f 4f       	sbci	r21, 0xFF	; 255
    160c:	3a f0       	brmi	.+14     	; 0x161c <__divsf3_pse+0x70>
    160e:	9e 3f       	cpi	r25, 0xFE	; 254
    1610:	51 05       	cpc	r21, r1
    1612:	78 f0       	brcs	.+30     	; 0x1632 <__divsf3_pse+0x86>
    1614:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_inf>
    1618:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_szero>
    161c:	5f 3f       	cpi	r21, 0xFF	; 255
    161e:	e4 f3       	brlt	.-8      	; 0x1618 <__divsf3_pse+0x6c>
    1620:	98 3e       	cpi	r25, 0xE8	; 232
    1622:	d4 f3       	brlt	.-12     	; 0x1618 <__divsf3_pse+0x6c>
    1624:	86 95       	lsr	r24
    1626:	77 95       	ror	r23
    1628:	67 95       	ror	r22
    162a:	b7 95       	ror	r27
    162c:	f7 95       	ror	r31
    162e:	9f 5f       	subi	r25, 0xFF	; 255
    1630:	c9 f7       	brne	.-14     	; 0x1624 <__divsf3_pse+0x78>
    1632:	88 0f       	add	r24, r24
    1634:	91 1d       	adc	r25, r1
    1636:	96 95       	lsr	r25
    1638:	87 95       	ror	r24
    163a:	97 f9       	bld	r25, 7
    163c:	08 95       	ret
    163e:	e1 e0       	ldi	r30, 0x01	; 1
    1640:	66 0f       	add	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	bb 1f       	adc	r27, r27
    1648:	62 17       	cp	r22, r18
    164a:	73 07       	cpc	r23, r19
    164c:	84 07       	cpc	r24, r20
    164e:	ba 07       	cpc	r27, r26
    1650:	20 f0       	brcs	.+8      	; 0x165a <__divsf3_pse+0xae>
    1652:	62 1b       	sub	r22, r18
    1654:	73 0b       	sbc	r23, r19
    1656:	84 0b       	sbc	r24, r20
    1658:	ba 0b       	sbc	r27, r26
    165a:	ee 1f       	adc	r30, r30
    165c:	88 f7       	brcc	.-30     	; 0x1640 <__divsf3_pse+0x94>
    165e:	e0 95       	com	r30
    1660:	08 95       	ret

00001662 <__floatunsisf>:
    1662:	e8 94       	clt
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <__floatsisf+0x12>

00001666 <__floatsisf>:
    1666:	97 fb       	bst	r25, 7
    1668:	3e f4       	brtc	.+14     	; 0x1678 <__floatsisf+0x12>
    166a:	90 95       	com	r25
    166c:	80 95       	com	r24
    166e:	70 95       	com	r23
    1670:	61 95       	neg	r22
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8f 4f       	sbci	r24, 0xFF	; 255
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	99 23       	and	r25, r25
    167a:	a9 f0       	breq	.+42     	; 0x16a6 <__floatsisf+0x40>
    167c:	f9 2f       	mov	r31, r25
    167e:	96 e9       	ldi	r25, 0x96	; 150
    1680:	bb 27       	eor	r27, r27
    1682:	93 95       	inc	r25
    1684:	f6 95       	lsr	r31
    1686:	87 95       	ror	r24
    1688:	77 95       	ror	r23
    168a:	67 95       	ror	r22
    168c:	b7 95       	ror	r27
    168e:	f1 11       	cpse	r31, r1
    1690:	f8 cf       	rjmp	.-16     	; 0x1682 <__floatsisf+0x1c>
    1692:	fa f4       	brpl	.+62     	; 0x16d2 <__floatsisf+0x6c>
    1694:	bb 0f       	add	r27, r27
    1696:	11 f4       	brne	.+4      	; 0x169c <__floatsisf+0x36>
    1698:	60 ff       	sbrs	r22, 0
    169a:	1b c0       	rjmp	.+54     	; 0x16d2 <__floatsisf+0x6c>
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	8f 4f       	sbci	r24, 0xFF	; 255
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <__floatsisf+0x6c>
    16a6:	88 23       	and	r24, r24
    16a8:	11 f0       	breq	.+4      	; 0x16ae <__floatsisf+0x48>
    16aa:	96 e9       	ldi	r25, 0x96	; 150
    16ac:	11 c0       	rjmp	.+34     	; 0x16d0 <__floatsisf+0x6a>
    16ae:	77 23       	and	r23, r23
    16b0:	21 f0       	breq	.+8      	; 0x16ba <__floatsisf+0x54>
    16b2:	9e e8       	ldi	r25, 0x8E	; 142
    16b4:	87 2f       	mov	r24, r23
    16b6:	76 2f       	mov	r23, r22
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <__floatsisf+0x5e>
    16ba:	66 23       	and	r22, r22
    16bc:	71 f0       	breq	.+28     	; 0x16da <__floatsisf+0x74>
    16be:	96 e8       	ldi	r25, 0x86	; 134
    16c0:	86 2f       	mov	r24, r22
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	2a f0       	brmi	.+10     	; 0x16d2 <__floatsisf+0x6c>
    16c8:	9a 95       	dec	r25
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	da f7       	brpl	.-10     	; 0x16c8 <__floatsisf+0x62>
    16d2:	88 0f       	add	r24, r24
    16d4:	96 95       	lsr	r25
    16d6:	87 95       	ror	r24
    16d8:	97 f9       	bld	r25, 7
    16da:	08 95       	ret

000016dc <__fp_cmp>:
    16dc:	99 0f       	add	r25, r25
    16de:	00 08       	sbc	r0, r0
    16e0:	55 0f       	add	r21, r21
    16e2:	aa 0b       	sbc	r26, r26
    16e4:	e0 e8       	ldi	r30, 0x80	; 128
    16e6:	fe ef       	ldi	r31, 0xFE	; 254
    16e8:	16 16       	cp	r1, r22
    16ea:	17 06       	cpc	r1, r23
    16ec:	e8 07       	cpc	r30, r24
    16ee:	f9 07       	cpc	r31, r25
    16f0:	c0 f0       	brcs	.+48     	; 0x1722 <__fp_cmp+0x46>
    16f2:	12 16       	cp	r1, r18
    16f4:	13 06       	cpc	r1, r19
    16f6:	e4 07       	cpc	r30, r20
    16f8:	f5 07       	cpc	r31, r21
    16fa:	98 f0       	brcs	.+38     	; 0x1722 <__fp_cmp+0x46>
    16fc:	62 1b       	sub	r22, r18
    16fe:	73 0b       	sbc	r23, r19
    1700:	84 0b       	sbc	r24, r20
    1702:	95 0b       	sbc	r25, r21
    1704:	39 f4       	brne	.+14     	; 0x1714 <__fp_cmp+0x38>
    1706:	0a 26       	eor	r0, r26
    1708:	61 f0       	breq	.+24     	; 0x1722 <__fp_cmp+0x46>
    170a:	23 2b       	or	r18, r19
    170c:	24 2b       	or	r18, r20
    170e:	25 2b       	or	r18, r21
    1710:	21 f4       	brne	.+8      	; 0x171a <__fp_cmp+0x3e>
    1712:	08 95       	ret
    1714:	0a 26       	eor	r0, r26
    1716:	09 f4       	brne	.+2      	; 0x171a <__fp_cmp+0x3e>
    1718:	a1 40       	sbci	r26, 0x01	; 1
    171a:	a6 95       	lsr	r26
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	81 1d       	adc	r24, r1
    1720:	81 1d       	adc	r24, r1
    1722:	08 95       	ret

00001724 <__fp_inf>:
    1724:	97 f9       	bld	r25, 7
    1726:	9f 67       	ori	r25, 0x7F	; 127
    1728:	80 e8       	ldi	r24, 0x80	; 128
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	08 95       	ret

00001730 <__fp_nan>:
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	80 ec       	ldi	r24, 0xC0	; 192
    1734:	08 95       	ret

00001736 <__fp_pscA>:
    1736:	00 24       	eor	r0, r0
    1738:	0a 94       	dec	r0
    173a:	16 16       	cp	r1, r22
    173c:	17 06       	cpc	r1, r23
    173e:	18 06       	cpc	r1, r24
    1740:	09 06       	cpc	r0, r25
    1742:	08 95       	ret

00001744 <__fp_pscB>:
    1744:	00 24       	eor	r0, r0
    1746:	0a 94       	dec	r0
    1748:	12 16       	cp	r1, r18
    174a:	13 06       	cpc	r1, r19
    174c:	14 06       	cpc	r1, r20
    174e:	05 06       	cpc	r0, r21
    1750:	08 95       	ret

00001752 <__fp_round>:
    1752:	09 2e       	mov	r0, r25
    1754:	03 94       	inc	r0
    1756:	00 0c       	add	r0, r0
    1758:	11 f4       	brne	.+4      	; 0x175e <__fp_round+0xc>
    175a:	88 23       	and	r24, r24
    175c:	52 f0       	brmi	.+20     	; 0x1772 <__fp_round+0x20>
    175e:	bb 0f       	add	r27, r27
    1760:	40 f4       	brcc	.+16     	; 0x1772 <__fp_round+0x20>
    1762:	bf 2b       	or	r27, r31
    1764:	11 f4       	brne	.+4      	; 0x176a <__fp_round+0x18>
    1766:	60 ff       	sbrs	r22, 0
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__fp_round+0x20>
    176a:	6f 5f       	subi	r22, 0xFF	; 255
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	8f 4f       	sbci	r24, 0xFF	; 255
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	08 95       	ret

00001774 <__fp_split3>:
    1774:	57 fd       	sbrc	r21, 7
    1776:	90 58       	subi	r25, 0x80	; 128
    1778:	44 0f       	add	r20, r20
    177a:	55 1f       	adc	r21, r21
    177c:	59 f0       	breq	.+22     	; 0x1794 <__fp_splitA+0x10>
    177e:	5f 3f       	cpi	r21, 0xFF	; 255
    1780:	71 f0       	breq	.+28     	; 0x179e <__fp_splitA+0x1a>
    1782:	47 95       	ror	r20

00001784 <__fp_splitA>:
    1784:	88 0f       	add	r24, r24
    1786:	97 fb       	bst	r25, 7
    1788:	99 1f       	adc	r25, r25
    178a:	61 f0       	breq	.+24     	; 0x17a4 <__fp_splitA+0x20>
    178c:	9f 3f       	cpi	r25, 0xFF	; 255
    178e:	79 f0       	breq	.+30     	; 0x17ae <__fp_splitA+0x2a>
    1790:	87 95       	ror	r24
    1792:	08 95       	ret
    1794:	12 16       	cp	r1, r18
    1796:	13 06       	cpc	r1, r19
    1798:	14 06       	cpc	r1, r20
    179a:	55 1f       	adc	r21, r21
    179c:	f2 cf       	rjmp	.-28     	; 0x1782 <__fp_split3+0xe>
    179e:	46 95       	lsr	r20
    17a0:	f1 df       	rcall	.-30     	; 0x1784 <__fp_splitA>
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <__fp_splitA+0x30>
    17a4:	16 16       	cp	r1, r22
    17a6:	17 06       	cpc	r1, r23
    17a8:	18 06       	cpc	r1, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	f1 cf       	rjmp	.-30     	; 0x1790 <__fp_splitA+0xc>
    17ae:	86 95       	lsr	r24
    17b0:	71 05       	cpc	r23, r1
    17b2:	61 05       	cpc	r22, r1
    17b4:	08 94       	sec
    17b6:	08 95       	ret

000017b8 <__fp_zero>:
    17b8:	e8 94       	clt

000017ba <__fp_szero>:
    17ba:	bb 27       	eor	r27, r27
    17bc:	66 27       	eor	r22, r22
    17be:	77 27       	eor	r23, r23
    17c0:	cb 01       	movw	r24, r22
    17c2:	97 f9       	bld	r25, 7
    17c4:	08 95       	ret

000017c6 <__gesf2>:
    17c6:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__fp_cmp>
    17ca:	08 f4       	brcc	.+2      	; 0x17ce <__gesf2+0x8>
    17cc:	8f ef       	ldi	r24, 0xFF	; 255
    17ce:	08 95       	ret

000017d0 <__mulsf3>:
    17d0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__mulsf3x>
    17d4:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__fp_round>
    17d8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <__fp_pscA>
    17dc:	38 f0       	brcs	.+14     	; 0x17ec <__mulsf3+0x1c>
    17de:	0e 94 a2 0b 	call	0x1744	; 0x1744 <__fp_pscB>
    17e2:	20 f0       	brcs	.+8      	; 0x17ec <__mulsf3+0x1c>
    17e4:	95 23       	and	r25, r21
    17e6:	11 f0       	breq	.+4      	; 0x17ec <__mulsf3+0x1c>
    17e8:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_inf>
    17ec:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__fp_nan>
    17f0:	11 24       	eor	r1, r1
    17f2:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_szero>

000017f6 <__mulsf3x>:
    17f6:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fp_split3>
    17fa:	70 f3       	brcs	.-36     	; 0x17d8 <__mulsf3+0x8>

000017fc <__mulsf3_pse>:
    17fc:	95 9f       	mul	r25, r21
    17fe:	c1 f3       	breq	.-16     	; 0x17f0 <__mulsf3+0x20>
    1800:	95 0f       	add	r25, r21
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	55 1f       	adc	r21, r21
    1806:	62 9f       	mul	r22, r18
    1808:	f0 01       	movw	r30, r0
    180a:	72 9f       	mul	r23, r18
    180c:	bb 27       	eor	r27, r27
    180e:	f0 0d       	add	r31, r0
    1810:	b1 1d       	adc	r27, r1
    1812:	63 9f       	mul	r22, r19
    1814:	aa 27       	eor	r26, r26
    1816:	f0 0d       	add	r31, r0
    1818:	b1 1d       	adc	r27, r1
    181a:	aa 1f       	adc	r26, r26
    181c:	64 9f       	mul	r22, r20
    181e:	66 27       	eor	r22, r22
    1820:	b0 0d       	add	r27, r0
    1822:	a1 1d       	adc	r26, r1
    1824:	66 1f       	adc	r22, r22
    1826:	82 9f       	mul	r24, r18
    1828:	22 27       	eor	r18, r18
    182a:	b0 0d       	add	r27, r0
    182c:	a1 1d       	adc	r26, r1
    182e:	62 1f       	adc	r22, r18
    1830:	73 9f       	mul	r23, r19
    1832:	b0 0d       	add	r27, r0
    1834:	a1 1d       	adc	r26, r1
    1836:	62 1f       	adc	r22, r18
    1838:	83 9f       	mul	r24, r19
    183a:	a0 0d       	add	r26, r0
    183c:	61 1d       	adc	r22, r1
    183e:	22 1f       	adc	r18, r18
    1840:	74 9f       	mul	r23, r20
    1842:	33 27       	eor	r19, r19
    1844:	a0 0d       	add	r26, r0
    1846:	61 1d       	adc	r22, r1
    1848:	23 1f       	adc	r18, r19
    184a:	84 9f       	mul	r24, r20
    184c:	60 0d       	add	r22, r0
    184e:	21 1d       	adc	r18, r1
    1850:	82 2f       	mov	r24, r18
    1852:	76 2f       	mov	r23, r22
    1854:	6a 2f       	mov	r22, r26
    1856:	11 24       	eor	r1, r1
    1858:	9f 57       	subi	r25, 0x7F	; 127
    185a:	50 40       	sbci	r21, 0x00	; 0
    185c:	9a f0       	brmi	.+38     	; 0x1884 <__mulsf3_pse+0x88>
    185e:	f1 f0       	breq	.+60     	; 0x189c <__mulsf3_pse+0xa0>
    1860:	88 23       	and	r24, r24
    1862:	4a f0       	brmi	.+18     	; 0x1876 <__mulsf3_pse+0x7a>
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	bb 1f       	adc	r27, r27
    186a:	66 1f       	adc	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	91 50       	subi	r25, 0x01	; 1
    1872:	50 40       	sbci	r21, 0x00	; 0
    1874:	a9 f7       	brne	.-22     	; 0x1860 <__mulsf3_pse+0x64>
    1876:	9e 3f       	cpi	r25, 0xFE	; 254
    1878:	51 05       	cpc	r21, r1
    187a:	80 f0       	brcs	.+32     	; 0x189c <__mulsf3_pse+0xa0>
    187c:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__fp_inf>
    1880:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__fp_szero>
    1884:	5f 3f       	cpi	r21, 0xFF	; 255
    1886:	e4 f3       	brlt	.-8      	; 0x1880 <__mulsf3_pse+0x84>
    1888:	98 3e       	cpi	r25, 0xE8	; 232
    188a:	d4 f3       	brlt	.-12     	; 0x1880 <__mulsf3_pse+0x84>
    188c:	86 95       	lsr	r24
    188e:	77 95       	ror	r23
    1890:	67 95       	ror	r22
    1892:	b7 95       	ror	r27
    1894:	f7 95       	ror	r31
    1896:	e7 95       	ror	r30
    1898:	9f 5f       	subi	r25, 0xFF	; 255
    189a:	c1 f7       	brne	.-16     	; 0x188c <__mulsf3_pse+0x90>
    189c:	fe 2b       	or	r31, r30
    189e:	88 0f       	add	r24, r24
    18a0:	91 1d       	adc	r25, r1
    18a2:	96 95       	lsr	r25
    18a4:	87 95       	ror	r24
    18a6:	97 f9       	bld	r25, 7
    18a8:	08 95       	ret

000018aa <__divmodhi4>:
    18aa:	97 fb       	bst	r25, 7
    18ac:	07 2e       	mov	r0, r23
    18ae:	16 f4       	brtc	.+4      	; 0x18b4 <__divmodhi4+0xa>
    18b0:	00 94       	com	r0
    18b2:	07 d0       	rcall	.+14     	; 0x18c2 <__divmodhi4_neg1>
    18b4:	77 fd       	sbrc	r23, 7
    18b6:	09 d0       	rcall	.+18     	; 0x18ca <__divmodhi4_neg2>
    18b8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__udivmodhi4>
    18bc:	07 fc       	sbrc	r0, 7
    18be:	05 d0       	rcall	.+10     	; 0x18ca <__divmodhi4_neg2>
    18c0:	3e f4       	brtc	.+14     	; 0x18d0 <__divmodhi4_exit>

000018c2 <__divmodhi4_neg1>:
    18c2:	90 95       	com	r25
    18c4:	81 95       	neg	r24
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	08 95       	ret

000018ca <__divmodhi4_neg2>:
    18ca:	70 95       	com	r23
    18cc:	61 95       	neg	r22
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255

000018d0 <__divmodhi4_exit>:
    18d0:	08 95       	ret

000018d2 <__udivmodhi4>:
    18d2:	aa 1b       	sub	r26, r26
    18d4:	bb 1b       	sub	r27, r27
    18d6:	51 e1       	ldi	r21, 0x11	; 17
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <__udivmodhi4_ep>

000018da <__udivmodhi4_loop>:
    18da:	aa 1f       	adc	r26, r26
    18dc:	bb 1f       	adc	r27, r27
    18de:	a6 17       	cp	r26, r22
    18e0:	b7 07       	cpc	r27, r23
    18e2:	10 f0       	brcs	.+4      	; 0x18e8 <__udivmodhi4_ep>
    18e4:	a6 1b       	sub	r26, r22
    18e6:	b7 0b       	sbc	r27, r23

000018e8 <__udivmodhi4_ep>:
    18e8:	88 1f       	adc	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	5a 95       	dec	r21
    18ee:	a9 f7       	brne	.-22     	; 0x18da <__udivmodhi4_loop>
    18f0:	80 95       	com	r24
    18f2:	90 95       	com	r25
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	08 95       	ret

000018fa <do_rand>:
    18fa:	8f 92       	push	r8
    18fc:	9f 92       	push	r9
    18fe:	af 92       	push	r10
    1900:	bf 92       	push	r11
    1902:	cf 92       	push	r12
    1904:	df 92       	push	r13
    1906:	ef 92       	push	r14
    1908:	ff 92       	push	r15
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	ec 01       	movw	r28, r24
    1910:	68 81       	ld	r22, Y
    1912:	79 81       	ldd	r23, Y+1	; 0x01
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	9b 81       	ldd	r25, Y+3	; 0x03
    1918:	61 15       	cp	r22, r1
    191a:	71 05       	cpc	r23, r1
    191c:	81 05       	cpc	r24, r1
    191e:	91 05       	cpc	r25, r1
    1920:	21 f4       	brne	.+8      	; 0x192a <do_rand+0x30>
    1922:	64 e2       	ldi	r22, 0x24	; 36
    1924:	79 ed       	ldi	r23, 0xD9	; 217
    1926:	8b e5       	ldi	r24, 0x5B	; 91
    1928:	97 e0       	ldi	r25, 0x07	; 7
    192a:	2d e1       	ldi	r18, 0x1D	; 29
    192c:	33 ef       	ldi	r19, 0xF3	; 243
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <__divmodsi4>
    1936:	49 01       	movw	r8, r18
    1938:	5a 01       	movw	r10, r20
    193a:	9b 01       	movw	r18, r22
    193c:	ac 01       	movw	r20, r24
    193e:	a7 ea       	ldi	r26, 0xA7	; 167
    1940:	b1 e4       	ldi	r27, 0x41	; 65
    1942:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__muluhisi3>
    1946:	6b 01       	movw	r12, r22
    1948:	7c 01       	movw	r14, r24
    194a:	ac ee       	ldi	r26, 0xEC	; 236
    194c:	b4 ef       	ldi	r27, 0xF4	; 244
    194e:	a5 01       	movw	r20, r10
    1950:	94 01       	movw	r18, r8
    1952:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__mulohisi3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8c 0d       	add	r24, r12
    195c:	9d 1d       	adc	r25, r13
    195e:	ae 1d       	adc	r26, r14
    1960:	bf 1d       	adc	r27, r15
    1962:	b7 ff       	sbrs	r27, 7
    1964:	03 c0       	rjmp	.+6      	; 0x196c <do_rand+0x72>
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	a1 09       	sbc	r26, r1
    196a:	b0 48       	sbci	r27, 0x80	; 128
    196c:	88 83       	st	Y, r24
    196e:	99 83       	std	Y+1, r25	; 0x01
    1970:	aa 83       	std	Y+2, r26	; 0x02
    1972:	bb 83       	std	Y+3, r27	; 0x03
    1974:	9f 77       	andi	r25, 0x7F	; 127
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	bf 90       	pop	r11
    1984:	af 90       	pop	r10
    1986:	9f 90       	pop	r9
    1988:	8f 90       	pop	r8
    198a:	08 95       	ret

0000198c <rand_r>:
    198c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <do_rand>
    1990:	08 95       	ret

00001992 <rand>:
    1992:	80 e6       	ldi	r24, 0x60	; 96
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <do_rand>
    199a:	08 95       	ret

0000199c <srand>:
    199c:	a0 e0       	ldi	r26, 0x00	; 0
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    19a4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    19a8:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    19ac:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    19b0:	08 95       	ret

000019b2 <__divmodsi4>:
    19b2:	05 2e       	mov	r0, r21
    19b4:	97 fb       	bst	r25, 7
    19b6:	1e f4       	brtc	.+6      	; 0x19be <__divmodsi4+0xc>
    19b8:	00 94       	com	r0
    19ba:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__negsi2>
    19be:	57 fd       	sbrc	r21, 7
    19c0:	07 d0       	rcall	.+14     	; 0x19d0 <__divmodsi4_neg2>
    19c2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <__udivmodsi4>
    19c6:	07 fc       	sbrc	r0, 7
    19c8:	03 d0       	rcall	.+6      	; 0x19d0 <__divmodsi4_neg2>
    19ca:	4e f4       	brtc	.+18     	; 0x19de <__divmodsi4_exit>
    19cc:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__negsi2>

000019d0 <__divmodsi4_neg2>:
    19d0:	50 95       	com	r21
    19d2:	40 95       	com	r20
    19d4:	30 95       	com	r19
    19d6:	21 95       	neg	r18
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
    19da:	4f 4f       	sbci	r20, 0xFF	; 255
    19dc:	5f 4f       	sbci	r21, 0xFF	; 255

000019de <__divmodsi4_exit>:
    19de:	08 95       	ret

000019e0 <__negsi2>:
    19e0:	90 95       	com	r25
    19e2:	80 95       	com	r24
    19e4:	70 95       	com	r23
    19e6:	61 95       	neg	r22
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	8f 4f       	sbci	r24, 0xFF	; 255
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	08 95       	ret

000019f0 <__muluhisi3>:
    19f0:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__umulhisi3>
    19f4:	a5 9f       	mul	r26, r21
    19f6:	90 0d       	add	r25, r0
    19f8:	b4 9f       	mul	r27, r20
    19fa:	90 0d       	add	r25, r0
    19fc:	a4 9f       	mul	r26, r20
    19fe:	80 0d       	add	r24, r0
    1a00:	91 1d       	adc	r25, r1
    1a02:	11 24       	eor	r1, r1
    1a04:	08 95       	ret

00001a06 <__mulshisi3>:
    1a06:	b7 ff       	sbrs	r27, 7
    1a08:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__muluhisi3>

00001a0c <__mulohisi3>:
    1a0c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <__muluhisi3>
    1a10:	82 1b       	sub	r24, r18
    1a12:	93 0b       	sbc	r25, r19
    1a14:	08 95       	ret

00001a16 <__udivmodsi4>:
    1a16:	a1 e2       	ldi	r26, 0x21	; 33
    1a18:	1a 2e       	mov	r1, r26
    1a1a:	aa 1b       	sub	r26, r26
    1a1c:	bb 1b       	sub	r27, r27
    1a1e:	fd 01       	movw	r30, r26
    1a20:	0d c0       	rjmp	.+26     	; 0x1a3c <__udivmodsi4_ep>

00001a22 <__udivmodsi4_loop>:
    1a22:	aa 1f       	adc	r26, r26
    1a24:	bb 1f       	adc	r27, r27
    1a26:	ee 1f       	adc	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	a2 17       	cp	r26, r18
    1a2c:	b3 07       	cpc	r27, r19
    1a2e:	e4 07       	cpc	r30, r20
    1a30:	f5 07       	cpc	r31, r21
    1a32:	20 f0       	brcs	.+8      	; 0x1a3c <__udivmodsi4_ep>
    1a34:	a2 1b       	sub	r26, r18
    1a36:	b3 0b       	sbc	r27, r19
    1a38:	e4 0b       	sbc	r30, r20
    1a3a:	f5 0b       	sbc	r31, r21

00001a3c <__udivmodsi4_ep>:
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	88 1f       	adc	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	1a 94       	dec	r1
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <__udivmodsi4_loop>
    1a48:	60 95       	com	r22
    1a4a:	70 95       	com	r23
    1a4c:	80 95       	com	r24
    1a4e:	90 95       	com	r25
    1a50:	9b 01       	movw	r18, r22
    1a52:	ac 01       	movw	r20, r24
    1a54:	bd 01       	movw	r22, r26
    1a56:	cf 01       	movw	r24, r30
    1a58:	08 95       	ret

00001a5a <__umulhisi3>:
    1a5a:	a2 9f       	mul	r26, r18
    1a5c:	b0 01       	movw	r22, r0
    1a5e:	b3 9f       	mul	r27, r19
    1a60:	c0 01       	movw	r24, r0
    1a62:	a3 9f       	mul	r26, r19
    1a64:	70 0d       	add	r23, r0
    1a66:	81 1d       	adc	r24, r1
    1a68:	11 24       	eor	r1, r1
    1a6a:	91 1d       	adc	r25, r1
    1a6c:	b2 9f       	mul	r27, r18
    1a6e:	70 0d       	add	r23, r0
    1a70:	81 1d       	adc	r24, r1
    1a72:	11 24       	eor	r1, r1
    1a74:	91 1d       	adc	r25, r1
    1a76:	08 95       	ret

00001a78 <_exit>:
    1a78:	f8 94       	cli

00001a7a <__stop_program>:
    1a7a:	ff cf       	rjmp	.-2      	; 0x1a7a <__stop_program>
